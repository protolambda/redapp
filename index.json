[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/contracts/AT/index.js",
    "content": "\n/**\n * Load a contract (binding it to an web3js Contract instance), and add it to the redux store.\n * The methods of the contract are also added to the store,\n * which can be called with their ABI arguments. This produces a thunk and an ID,\n * the thunk can then be dispatched to execute the method,\n * and the ID can be used to track the progress.\n * @type {ReduxActionType}\n */\nexport const ADD_CONTRACT = 'ADD_CONTRACT';\n\n/**\n * When the contract is loaded, the reducer adds it to the store now.\n * @type {ReduxActionType}\n */\nexport const CONTRACT_ADDED = 'CONTRACT_ADDED';\n\n/**\n * Remove a contract from redux store.\n * @type {ReduxActionType}\n */\nexport const FORGET_CONTRACT = 'FORGET_CONTRACT';\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/contracts/AT/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "ADD_CONTRACT",
    "memberof": "src/contracts/AT/index.js",
    "static": true,
    "longname": "src/contracts/AT/index.js~ADD_CONTRACT",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/contracts/AT/index.js",
    "importStyle": "{ADD_CONTRACT}",
    "description": "Load a contract (binding it to an web3js Contract instance), and add it to the redux store.\nThe methods of the contract are also added to the store,\nwhich can be called with their ABI arguments. This produces a thunk and an ID,\nthe thunk can then be dispatched to execute the method,\nand the ID can be used to track the progress.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "CONTRACT_ADDED",
    "memberof": "src/contracts/AT/index.js",
    "static": true,
    "longname": "src/contracts/AT/index.js~CONTRACT_ADDED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/contracts/AT/index.js",
    "importStyle": "{CONTRACT_ADDED}",
    "description": "When the contract is loaded, the reducer adds it to the store now.",
    "lineNumber": 16,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "FORGET_CONTRACT",
    "memberof": "src/contracts/AT/index.js",
    "static": true,
    "longname": "src/contracts/AT/index.js~FORGET_CONTRACT",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/contracts/AT/index.js",
    "importStyle": "{FORGET_CONTRACT}",
    "description": "Remove a contract from redux store.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/contracts/actions/index.js",
    "content": "import * as contractsAT from '../AT';\n\n/**\n * Load a contract (binding it to an web3js Contract instance), and add it to the redux store.\n * The methods of the contract are also added to the store,\n * which can be called with their ABI arguments. This produces a thunk and an ID,\n * the thunk can then be dispatched to execute the method,\n * and the ID can be used to track the progress.\n *\n * @param contractName The name of the contract, to use as key in the store.\n *  Any contract with the same name will be overwritten.\n * @param abi The ABI spec (decoded object, not encoded as string).\n *  All the methods in the spec will be loaded as call/send thunk creators.\n *  (i.e. cacheCall/forceCall/trackedSend)\n * @param networks The network spec, like formatted by tools like truffle. An object,\n *  with network IDs (strings) as keys, and each value being an object with an \"address\" property.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const addContract = (contractName, abi, networks) => (dispatch => dispatch({\n  type: contractsAT.ADD_CONTRACT,\n  contractName,\n  abi,\n  networks,\n}));\n\n/**\n * Removes the contract from the local redux store.\n * Note: this does not affect the real contract in any way.\n * @param contractName The name of the contract (key in the state tree)\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const forgetContract = contractName => (dispatch => dispatch({\n  type: contractsAT.FORGET_CONTRACT,\n  contractName,\n}));\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/contracts/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "addContract",
    "memberof": "src/contracts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/contracts/actions/index.js~addContract",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/contracts/actions/index.js",
    "importStyle": "{addContract}",
    "description": "Load a contract (binding it to an web3js Contract instance), and add it to the redux store.\nThe methods of the contract are also added to the store,\nwhich can be called with their ABI arguments. This produces a thunk and an ID,\nthe thunk can then be dispatched to execute the method,\nand the ID can be used to track the progress.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "contractName",
        "description": "The name of the contract, to use as key in the store.\n Any contract with the same name will be overwritten."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "abi",
        "description": "The ABI spec (decoded object, not encoded as string).\n All the methods in the spec will be loaded as call/send thunk creators.\n (i.e. cacheCall/forceCall/trackedSend)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "networks",
        "description": "The network spec, like formatted by tools like truffle. An object,\n with network IDs (strings) as keys, and each value being an object with an \"address\" property."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "forgetContract",
    "memberof": "src/contracts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/contracts/actions/index.js~forgetContract",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/contracts/actions/index.js",
    "importStyle": "{forgetContract}",
    "description": "Removes the contract from the local redux store.\nNote: this does not affect the real contract in any way.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "contractName",
        "description": "The name of the contract (key in the state tree)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/contracts/contractsRed.js",
    "content": "import * as contractsAt from './AT';\nimport mappedReducer from '../util/mapped-reducer';\n\nconst initialState = {\n  // empty, no contracts loaded.\n};\n\nconst mapping = {\n  [contractsAt.CONTRACT_ADDED]: (state, {contractName, methods, networks}) => ({\n    ...state,\n    // Add the contract to the state\n    [contractName]: {\n      methods,\n      networks\n    }\n  }),\n  [contractsAt.FORGET_CONTRACT]: (state, {contractName}) => {\n    // copy the state, we don't want to alter the old state,\n    //  but we do want to do a shallow copy: keep the same contract thunks alive.\n    const newState = {...state};\n    // remove the contract\n    delete newState[contractName];\n    return newState;\n  }\n};\n\n/**\n * Contracts reducer of redapp.\n * @type {ReduxReducer}\n */\nexport default mappedReducer(mapping, initialState);\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/contracts/contractsRed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "initialState",
    "memberof": "src/contracts/contractsRed.js",
    "static": true,
    "longname": "src/contracts/contractsRed.js~initialState",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/contracts/contractsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "mapping",
    "memberof": "src/contracts/contractsRed.js",
    "static": true,
    "longname": "src/contracts/contractsRed.js~mapping",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/contracts/contractsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/contracts/contractsSaga.js",
    "content": "import {\n  takeEvery, put\n} from 'redux-saga/effects';\nimport Web3Utils from 'web3-utils';\nimport uuid4 from 'uuid/v4';\nimport * as contractsAT from './AT';\nimport * as callsAT from '../tracking/calls/AT';\nimport * as transactionsAT from '../tracking/transactions/AT';\nimport EncodeABIError from '../errors/EncodeABIError';\n\nfunction* addContract(web3, defaultNetworkId, getContractsState, {contractName, abi, networks}) {\n  // Keep contract creation extremely simple:\n  //  we only use this instance to create the ABI encoded data with,\n  //  transactions/calls/events will be handled by the other parts of ReDApp.\n  // This generalizes the flow, and makes it easy to re-instantiate\n  //  this store redux entry from persisted data.\n  const web3Contract = new web3.eth.Contract(abi);\n\n  const methods = {};\n\n  // Create methods for each abi entry,\n  //  each returning a thunk to dispatch and execute the method with.\n  for (const entry of abi) {\n    if (entry.type === 'function') {\n      // Add ABI data to each method\n      const method = {...entry};\n      const encodeABI = (args) => {\n        try {\n          return web3Contract.methods[entry.name](...args).encodeABI();\n        } catch (err) {\n          throw new EncodeABIError(`Failed to encode arguments: ${args}`);\n        }\n      };\n\n      // Constant methods don't change any state; hence, only add call functionality.\n      if (entry.constant) {\n        const caller = callType => (({blockNr, to, networkId}, ...args) => {\n          const callData = encodeABI(args);\n          // Hash it, a new call with the same exact input will hit the cache.\n          // Also add the block-number, this also influences the computation.\n          const callID = `${to || '*'}-${Web3Utils.soliditySha3(callData)}-${blockNr || 'latest'}`;\n\n          // Return the callID together with the thunk,\n          //  this thunk can be dispatched, and the thunk-middleware will pick it up.\n          // The callID can be used to get the result.\n          return {\n            callID,\n            thunk: (dispatch, getState) => {\n              const contractAddress = to || (getContractsState(getState())[contractName]\n                .networks[networkId || defaultNetworkId].address);\n              dispatch({\n                type: callType, data: callData, blockNr, callID, to: contractAddress,\n                outputsABI: entry.outputs\n              });\n            }\n          };\n        });\n        method.cacheCall = caller(callsAT.CACHE_CALL);\n        method.forceCall = caller(callsAT.FORCE_CALL);\n      } else {\n        // Method is not constant, so it not for calling but for transacting.\n        method.trackedSend = ({from, value, gas, gasPrice, nonce, to, networkId}, ...args) => {\n          const txData = encodeABI(args);\n          // Simply use an UUID, transactions are not cached like calls, uniqueness is good.\n          const txID = uuid4();\n\n          // Return the txID together with the thunk,\n          //  this thunk can be dispatched, and the thunk-middleware will pick it up.\n          // The txID can be used to receive status updates from the tracker.\n          return {\n            txID,\n            thunk: (dispatch, getState) => {\n              const contractAddress = to || (getContractsState(getState())[contractName]\n                .networks[networkId || defaultNetworkId].address);\n              dispatch({\n                type: transactionsAT.SEND_TX, txID, data: txData,\n                from, to: contractAddress, value, gas, gasPrice, nonce\n              });\n            }\n          };\n        };\n      }\n      methods[entry.name] = method;\n    }\n  }\n\n  // TODO: add events as well?\n\n  yield put({type: contractsAT.CONTRACT_ADDED, contractName, methods, networks});\n}\n\n\n/**\n * Handles ReDApp contract background processing, e.g. loading new contracts.\n * @param web3 The web3js 1.0 instance to use.\n * @param defaultNetworkId The default network ID to use when looking up a contract address.\n * @param {ReduxStateSelector} getContractsState Gets contracts state\n * @return {ReduxSaga} Contracts saga.\n */\nfunction* contractsSaga(web3, defaultNetworkId, getContractsState) {\n  yield takeEvery(contractsAT.ADD_CONTRACT, addContract, web3, defaultNetworkId, getContractsState);\n}\n\nexport default contractsSaga;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/contracts/contractsSaga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "addContract",
    "memberof": "src/contracts/contractsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/contracts/contractsSaga.js~addContract",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/contracts/contractsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultNetworkId",
        "types": [
          "*"
        ]
      },
      {
        "name": "getContractsState",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern3",
        "types": [
          "{\"contractName\": *, \"abi\": *, \"networks\": *}"
        ],
        "defaultRaw": {
          "contractName": null,
          "abi": null,
          "networks": null
        },
        "defaultValue": "{\"contractName\":null,\"abi\":null,\"networks\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "contractsSaga",
    "memberof": "src/contracts/contractsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/contracts/contractsSaga.js~contractsSaga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/contracts/contractsSaga.js",
    "importStyle": "contractsSaga",
    "description": "Handles ReDApp contract background processing, e.g. loading new contracts.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3js 1.0 instance to use."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultNetworkId",
        "description": "The default network ID to use when looking up a contract address."
      },
      {
        "nullable": null,
        "types": [
          "ReduxStateSelector"
        ],
        "spread": false,
        "optional": false,
        "name": "getContractsState",
        "description": "Gets contracts state"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "Contracts saga."
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/docs.js",
    "content": "// This file is to enhance the documentation with typedefs + external links\n\n/**\n * A redux thunk, dispatch this to run it. https://github.com/reduxjs/redux-thunk\n * @typedef {function(dispatch:*, getState:*) | function(dispatch:*)} ReduxThunk\n */\n\n/**\n * A redux action type.\n * @typedef {string} ReduxActionType\n */\n\n/**\n * A redux saga (a generator returned by a generator function). https://redux-saga.js.org/\n * @typedef {Generator<*>} ReduxSaga\n */\n\n/**\n * A redux reducer.\n * @typedef {Reducer<any> | Reducer<any, AnyAction>} ReduxReducer\n */\n\n/**\n * Redux state selector. Maps the whole state to just a specific part of the state.\n * This is used to structure and re-combine ReDApp modules however you like,\n *  if you prefer something else than the default.\n *\n * @example\n * // get redapp root\n * getRootState: (state) => state.redapp\n *\n * // From redapp root state to tracking state.\n * getTrackingState: (state) => getRootState(state).tracking\n *\n * // From tracking state to transactions state.\n * getTransactionsState: (state) => getTrackingState(state).transactions\n *\n * @typedef {function(state:object):*} ReduxStateSelector\n */\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/docs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "ReduxThunk",
    "memberof": "src/docs.js",
    "static": true,
    "longname": "src/docs.js~ReduxThunk",
    "access": "public",
    "description": "A redux thunk, dispatch this to run it. https://github.com/reduxjs/redux-thunk",
    "type": {
      "types": [
        "function(dispatch:*, getState:*) ",
        " function(dispatch:*)"
      ],
      "optional": false,
      "name": "ReduxThunk"
    }
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "ReduxActionType",
    "memberof": "src/docs.js",
    "static": true,
    "longname": "src/docs.js~ReduxActionType",
    "access": "public",
    "description": "A redux action type.",
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "ReduxActionType"
    }
  },
  {
    "__docId__": 64,
    "kind": "typedef",
    "name": "ReduxSaga",
    "memberof": "src/docs.js",
    "static": true,
    "longname": "src/docs.js~ReduxSaga",
    "access": "public",
    "description": "A redux saga (a generator returned by a generator function). https://redux-saga.js.org/",
    "type": {
      "types": [
        "Generator<*>"
      ],
      "optional": false,
      "name": "ReduxSaga"
    }
  },
  {
    "__docId__": 65,
    "kind": "typedef",
    "name": "ReduxReducer",
    "memberof": "src/docs.js",
    "static": true,
    "longname": "src/docs.js~ReduxReducer",
    "access": "public",
    "description": "A redux reducer.",
    "type": {
      "types": [
        "Reducer<any> | Reducer<any, AnyAction>"
      ],
      "optional": false,
      "name": "ReduxReducer"
    }
  },
  {
    "__docId__": 66,
    "kind": "typedef",
    "name": "ReduxStateSelector",
    "memberof": "src/docs.js",
    "static": true,
    "longname": "src/docs.js~ReduxStateSelector",
    "access": "public",
    "description": "Redux state selector. Maps the whole state to just a specific part of the state.\nThis is used to structure and re-combine ReDApp modules however you like,\n if you prefer something else than the default.",
    "examples": [
      "// get redapp root\ngetRootState: (state) => state.redapp\n\n// From redapp root state to tracking state.\ngetTrackingState: (state) => getRootState(state).tracking\n\n// From tracking state to transactions state.\ngetTransactionsState: (state) => getTrackingState(state).transactions"
    ],
    "type": {
      "types": [
        "function(state:object):*"
      ],
      "optional": false,
      "name": "ReduxStateSelector"
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/errors/EncodeABIError.js",
    "content": "class EncodeABIError extends Error {}\n\nexport default EncodeABIError;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/errors/EncodeABIError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "EncodeABIError",
    "memberof": "src/errors/EncodeABIError.js",
    "static": true,
    "longname": "src/errors/EncodeABIError.js~EncodeABIError",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/errors/EncodeABIError.js",
    "importStyle": "EncodeABIError",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ],
    "ignore": true
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/initWeb3.js",
    "content": "import Web3 from 'web3';\n\n/**\n * Initializes web3 in a fairly standard way. Utility function, for the \"lazy\" dev.\n * @param fallback An object specifying what to use when no provider was found.\n * @returns Web3 A new web3 instance, or throws an error if failing to instantiate.\n */\nexport default function initWeb3(fallback) {\n  let web3 = null;\n\n  // Check for injected web3 provider.\n  if (typeof window.web3 !== 'undefined') {\n    web3 = new Web3(window.web3.currentProvider);\n  }\n\n  // If no web3 provider was injected into the web-page, then try to use the fallback.\n  if (!web3 && fallback) {\n    switch (fallback.type) {\n      case 'ws': {\n        const provider = new Web3.providers.WebsocketProvider(fallback.url);\n        web3 = new Web3(provider);\n        break;\n      }\n      // TODO add more fallback types (?)\n      default:\n        throw new Error(`Unknown web3 provider fallback type: ${fallback.type}.`);\n    }\n  }\n\n  if (!web3) {\n    throw new Error('No injected web3 provider or fallback option.');\n  }\n\n  return web3;\n}\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/initWeb3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "initWeb3",
    "memberof": "src/initWeb3.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/initWeb3.js~initWeb3",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/initWeb3.js",
    "importStyle": "initWeb3",
    "description": "Initializes web3 in a fairly standard way. Utility function, for the \"lazy\" dev.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Web3 A new web3 instance, or throws an error if failing to instantiate."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fallback",
        "description": "An object specifying what to use when no provider was found."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Web3 A new web3 instance, or throws an error if failing to instantiate."
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/reducer.js",
    "content": "import { combineReducers } from 'redux';\n\nimport trackingRed from './tracking/trackingRed';\nimport contractsRed from './contracts/contractsRed';\n\n/**\n * Root reducer of redapp.\n * @type {ReduxReducer}\n */\nconst reducer = combineReducers({\n  tracking: trackingRed,\n  contracts: contractsRed\n});\n\nexport default reducer;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/reducer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "reducer",
    "memberof": "src/reducer.js",
    "static": true,
    "longname": "src/reducer.js~reducer",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/reducer.js",
    "importStyle": "reducer",
    "description": "Root reducer of redapp.",
    "lineNumber": 10,
    "type": {
      "nullable": null,
      "types": [
        "ReduxReducer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/saga.js",
    "content": "import { all, fork } from 'redux-saga/effects';\n\nimport trackingSaga from './tracking/trackingSaga';\nimport contractsSaga from './contracts/contractsSaga';\n\n/**\n * Forks to tracking and contracts saga.\n * @param web3 The web3js 1.0 instance to use.\n * @param defaultNetworkId The network ID to resort to when no specific\n *  network ID is specified in an action.\n * @param getRootState A state selector (E.g. `(state) => state.redapp`)\n *  that points to the root of the ReDApp state. This pattern repeats for each saga,\n *  enabling you to compose custom state structures.\n * @return {ReduxSaga} The ReDApp root saga.\n */\nexport default function* saga(web3, defaultNetworkId, getRootState) {\n  yield all([\n    fork(trackingSaga, web3, state => getRootState(state).tracking),\n    fork(contractsSaga, web3, defaultNetworkId, state => getRootState(state).contracts)\n  ]);\n}\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/saga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "saga",
    "memberof": "src/saga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/saga.js~saga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/saga.js",
    "importStyle": "saga",
    "description": "Forks to tracking and contracts saga.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3js 1.0 instance to use."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultNetworkId",
        "description": "The network ID to resort to when no specific\n network ID is specified in an action."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "getRootState",
        "description": "A state selector (E.g. `(state) => state.redapp`)\n that points to the root of the ReDApp state. This pattern repeats for each saga,\n enabling you to compose custom state structures."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "The ReDApp root saga."
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/tracking/accounts/AT/index.js",
    "content": "\nexport const ACCOUNTS_START_FETCH = 'ACCOUNTS_START_FETCH';\n\nexport const ACCOUNTS_FETCH_COMPLETED = 'ACCOUNTS_FETCH_COMPLETED';\n\nexport const ACCOUNTS_FETCH_FAILED = 'ACCOUNTS_FETCH_FAILED';\n\n/**\n * Get data (like the balance) for each account in the tracker.\n * @type {ReduxActionType}\n */\nexport const ACCOUNTS_GET_ALL = 'ACCOUNTS_GET_ALL';\n\n/**\n * Get data for an individual account.\n * @type {ReduxActionType}\n */\nexport const ACCOUNT_GET = 'ACCOUNT_GET';\n\n/**\n * To start updating the balance of an account.\n * @type {ReduxActionType}\n */\nexport const ACCOUNT_GET_BALANCE = 'ACCOUNT_GET_BALANCE';\n\n/**\n * When balance updating fails.\n * @type {ReduxActionType}\n */\nexport const ACCOUNT_GET_BALANCE_FAILED = 'ACCOUNT_GET_BALANCE_FAILED';\n\n/**\n * When an account gets a new updated balance.\n * @type {ReduxActionType}\n */\nexport const ACCOUNT_BALANCE = 'ACCOUNT_BALANCE';\n\n/**\n * Start polling accounts (runs a ACCOUNTS_START_FETCH, followed by a ACCOUNTS_GET_ALL).\n * @type {ReduxActionType}\n */\nexport const ACCOUNTS_START_POLLING = 'ACCOUNTS_START_POLLING';\n\n/**\n * Stop polling accounts (Polling can be resumed with ACCOUNTS_START_POLLING again).\n * @type {ReduxActionType}\n */\nexport const ACCOUNTS_STOP_POLLING = 'ACCOUNTS_STOP_POLLING';\n\n/**\n * Whenever accounts polling failed, fired with \"err\" property containing the error.\n * @type {ReduxActionType}\n */\nexport const ACCOUNTS_POLL_ERROR = 'ACCOUNTS_POLL_ERROR';\n\n/**\n * Add an account to track locally. (i.e. no interaction with the user)\n * @type {ReduxActionType}\n */\nexport const ADD_LOCAL_ACCOUNT = 'ADD_LOCAL_ACCOUNT';\n\n/**\n * Forget local account.\n * @type {ReduxActionType}\n */\nexport const FORGET_LOCAL_ACCOUNT = 'FORGET_LOCAL_ACCOUNT';\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/accounts/AT/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "ACCOUNTS_START_FETCH",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_START_FETCH",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_START_FETCH}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "ACCOUNTS_FETCH_COMPLETED",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_FETCH_COMPLETED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_FETCH_COMPLETED}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "ACCOUNTS_FETCH_FAILED",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_FETCH_FAILED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_FETCH_FAILED}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "ACCOUNTS_GET_ALL",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_GET_ALL",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_GET_ALL}",
    "description": "Get data (like the balance) for each account in the tracker.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "ACCOUNT_GET",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNT_GET",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNT_GET}",
    "description": "Get data for an individual account.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "ACCOUNT_GET_BALANCE",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNT_GET_BALANCE",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNT_GET_BALANCE}",
    "description": "To start updating the balance of an account.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "ACCOUNT_GET_BALANCE_FAILED",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNT_GET_BALANCE_FAILED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNT_GET_BALANCE_FAILED}",
    "description": "When balance updating fails.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "ACCOUNT_BALANCE",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNT_BALANCE",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNT_BALANCE}",
    "description": "When an account gets a new updated balance.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "ACCOUNTS_START_POLLING",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_START_POLLING",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_START_POLLING}",
    "description": "Start polling accounts (runs a ACCOUNTS_START_FETCH, followed by a ACCOUNTS_GET_ALL).",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "ACCOUNTS_STOP_POLLING",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_STOP_POLLING",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_STOP_POLLING}",
    "description": "Stop polling accounts (Polling can be resumed with ACCOUNTS_START_POLLING again).",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "variable",
    "name": "ACCOUNTS_POLL_ERROR",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ACCOUNTS_POLL_ERROR",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ACCOUNTS_POLL_ERROR}",
    "description": "Whenever accounts polling failed, fired with \"err\" property containing the error.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "ADD_LOCAL_ACCOUNT",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~ADD_LOCAL_ACCOUNT",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{ADD_LOCAL_ACCOUNT}",
    "description": "Add an account to track locally. (i.e. no interaction with the user)",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 88,
    "kind": "variable",
    "name": "FORGET_LOCAL_ACCOUNT",
    "memberof": "src/tracking/accounts/AT/index.js",
    "static": true,
    "longname": "src/tracking/accounts/AT/index.js~FORGET_LOCAL_ACCOUNT",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/AT/index.js",
    "importStyle": "{FORGET_LOCAL_ACCOUNT}",
    "description": "Forget local account.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/tracking/accounts/accountsRed.js",
    "content": "import * as accountsAT from './AT';\nimport mappedReducer from '../../util/mapped-reducer';\n\nconst initialState = {\n  // The accounts fetched from web3 provider\n  wallet: {\n    // Empty initially\n  },\n  // The accounts managed locally\n  local: {\n    // Empty initially\n  }\n};\n\n// Check if the address is part of the wallet being tracked.\nconst isWalletAccount = (state, address) => !!state.wallet[address];\nconst isLocalAccount = (state, address) => !!state.local[address];\n\nconst mapping = {\n  [accountsAT.ACCOUNTS_FETCH_COMPLETED]: (state, {accounts}) => {\n    // Enforce lowercase storage of addresses.\n    const accountsLowercase = accounts.map(addr => addr.toLowerCase());\n    return ({\n      ...state,\n      // Retain any existing account data if it can be found in the fetched account list.\n      // Remove the other accounts from the state.\n      // Add any new accounts.\n      wallet: Object.assign({},\n        ...accountsLowercase.map(address => ({[address]: {}})),\n        ...Object.entries(state.wallet)\n          // eslint-disable-next-line no-unused-vars\n          .filter(([address, data]) => (accountsLowercase.indexOf(address) >= 0))\n          .map(([address, data]) => ({[address]: data})))\n    });\n  },\n  [accountsAT.ACCOUNT_BALANCE]: (state, {account, balance}) => {\n    const addressLowercase = account.toLowerCase();\n    return ({\n      ...state,\n      ...(isWalletAccount(state, addressLowercase) && ({\n        wallet: {\n          ...state.wallet,\n          [addressLowercase]: {\n            ...state.wallet[addressLowercase],\n            balance\n          }\n        }\n      })),\n      ...(isLocalAccount(state, addressLowercase) && ({\n        local: {\n          ...state.local,\n          [addressLowercase]: {\n            ...state.local[addressLowercase],\n            balance\n          }\n        }\n      }))\n    });\n  },\n  [accountsAT.ADD_LOCAL_ACCOUNT]: (state, {account}) => ({\n    ...state,\n    local: {\n      ...state.local,\n      [account.toLowerCase()]: {\n        // Fresh data, forget possible existing entry for account.\n      }\n    }\n  }),\n  [accountsAT.FORGET_LOCAL_ACCOUNT]: (state, {account}) => {\n    const res = {...state, local: {...state.local}};\n    delete res.local[account.toLowerCase()];\n    return res;\n  }\n};\n\nconst accountsRed = mappedReducer(mapping, initialState);\n\nexport default accountsRed;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/accounts/accountsRed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "variable",
    "name": "initialState",
    "memberof": "src/tracking/accounts/accountsRed.js",
    "static": true,
    "longname": "src/tracking/accounts/accountsRed.js~initialState",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"wallet\": *, \"local\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "isWalletAccount",
    "memberof": "src/tracking/accounts/accountsRed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsRed.js~isWalletAccount",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "isLocalAccount",
    "memberof": "src/tracking/accounts/accountsRed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsRed.js~isLocalAccount",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "mapping",
    "memberof": "src/tracking/accounts/accountsRed.js",
    "static": true,
    "longname": "src/tracking/accounts/accountsRed.js~mapping",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "variable",
    "name": "accountsRed",
    "memberof": "src/tracking/accounts/accountsRed.js",
    "static": true,
    "longname": "src/tracking/accounts/accountsRed.js~accountsRed",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/accountsRed.js",
    "importStyle": "accountsRed",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/tracking/accounts/accountsSaga.js",
    "content": "import {\n  call, fork, put, select, takeEvery, takeLatest\n} from 'redux-saga/effects';\nimport * as accountsAT from './AT';\nimport poller from '../../util/poller';\n\nfunction* tryFetchAccounts(web3) {\n  try {\n    // fetch the accounts from web3\n    const accounts = yield call(web3.eth.getAccounts);\n\n    // TODO: do we like this as behavior? Or is no accounts a valid fetch result?\n    if (!accounts) {\n      throw new Error('No accounts available.');\n    }\n\n    // Simply create make the reducer handle the new accounts;\n    //  old accounts will be filtered, new accounts added.\n    yield put({type: accountsAT.ACCOUNTS_FETCH_COMPLETED, accounts});\n  } catch (err) {\n    yield put({type: accountsAT.ACCOUNTS_FETCH_FAILED, err});\n  }\n}\n// TODO should accounts be fetched automatically on interval?\n\nfunction* tryGetBalance(web3, {account}) {\n  try {\n    const balance = yield call(web3.eth.getBalance, account);\n\n    yield put({type: accountsAT.ACCOUNT_BALANCE, account, balance});\n  } catch (err) {\n    yield put({type: accountsAT.ACCOUNT_GET_BALANCE_FAILED, account, err});\n  }\n}\n\nfunction* getSingle({account}) {\n  // No other data than just the balance for now.\n  yield put({type: accountsAT.ACCOUNT_GET_BALANCE, account});\n}\n\nfunction* getAll(getAccountsState) {\n  const accounts = yield select(getAccountsState);\n\n  // Get wallet accounts\n  for (const account of Object.keys(accounts.wallet)) {\n    yield put({type: accountsAT.ACCOUNT_GET, account});\n  }\n\n  // Get local accounts (tracked, but not part of wallet)\n  for (const account of Object.keys(accounts.local)) {\n    yield put({type: accountsAT.ACCOUNT_GET, account});\n  }\n}\n\nfunction* accountsPollWorker(web3, getAccountsState) {\n  yield call(tryFetchAccounts, web3);\n  yield call(getAll, getAccountsState);\n}\n\nfunction* accountsPollError(err) {\n  yield put({type: accountsAT.ACCOUNTS_POLL_ERROR, err: err.message});\n}\n\nfunction* accountsSaga(web3, getAccountsState) {\n  yield fork(poller(\n    accountsAT.ACCOUNTS_START_POLLING,\n    accountsAT.ACCOUNTS_STOP_POLLING,\n    accountsPollWorker,\n    accountsPollError,\n    web3, getAccountsState\n  ));\n  // only take latest, doing multiple buffered updates is useless.\n  yield takeLatest(accountsAT.ACCOUNTS_START_FETCH, tryFetchAccounts, web3);\n  yield takeLatest(accountsAT.ACCOUNTS_GET_ALL, getAll, getAccountsState);\n  yield takeEvery(accountsAT.ACCOUNT_GET, getSingle);\n  yield takeEvery(accountsAT.ACCOUNT_GET_BALANCE, tryGetBalance, web3);\n}\n\nexport default accountsSaga;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/accounts/accountsSaga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "function",
    "name": "tryFetchAccounts",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~tryFetchAccounts",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "tryGetBalance",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~tryGetBalance",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"account\": *}"
        ],
        "defaultRaw": {
          "account": null
        },
        "defaultValue": "{\"account\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "getSingle",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~getSingle",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"account\": *}"
        ],
        "defaultRaw": {
          "account": null
        },
        "defaultValue": "{\"account\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "getAll",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~getAll",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "getAccountsState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "accountsPollWorker",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~accountsPollWorker",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "getAccountsState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "accountsPollError",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~accountsPollError",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "accountsSaga",
    "memberof": "src/tracking/accounts/accountsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/accountsSaga.js~accountsSaga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/accountsSaga.js",
    "importStyle": "accountsSaga",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "getAccountsState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "src/tracking/accounts/actions/index.js",
    "content": "import * as accountsAT from '../AT';\n\n/**\n * Get data for an individual account.\n *\n * @param address The address to get the data for.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const getSingleAccount = address => (dispatch => dispatch({\n  type: accountsAT.ACCOUNT_GET,\n  account: address,\n}));\n\n/**\n * To start updating the balance of an account\n *\n * @param address\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const getBalance = address => (dispatch => dispatch({\n  type: accountsAT.ACCOUNT_GET_BALANCE,\n  account: address,\n}));\n\n/**\n * Get data (like the balance) for each account in the tracker\n *\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const getAllAccounts = () => (dispatch => dispatch({\n  type: accountsAT.ACCOUNTS_GET_ALL,\n}));\n\n/**\n * Update the list of wallet accounts.\n *\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const fetchAllAcounts = () => (dispatch => dispatch({\n  type: accountsAT.ACCOUNTS_START_FETCH,\n}));\n\n/**\n * Start polling for accounts.\n * @param interval The polling interval in milliseconds.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const startAccountPolling = interval => (dispatch => dispatch({\n  type: accountsAT.ACCOUNTS_START_POLLING,\n  interval\n}));\n\n/**\n * Stop polling for accounts.\n *\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const stopAccountPolling = () => (dispatch => dispatch({\n  type: accountsAT.ACCOUNTS_STOP_POLLING,\n}));\n\n/**\n * Add an account to track locally. (i.e. no interaction with the user)\n *\n * @param address The address of the account to start tracking.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const addLocalAcount = address => (dispatch => dispatch({\n  type: accountsAT.ADD_LOCAL_ACCOUNT,\n  account: address\n}));\n\n/**\n * Forget local account.\n *\n * @param address The address of the account to forget.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const forgetLocalAccount = address => (dispatch => dispatch({\n  type: accountsAT.FORGET_LOCAL_ACCOUNT,\n  account: address\n}));\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/accounts/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "getSingleAccount",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~getSingleAccount",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{getSingleAccount}",
    "description": "Get data for an individual account.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "The address to get the data for."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 105,
    "kind": "function",
    "name": "getBalance",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~getBalance",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{getBalance}",
    "description": "To start updating the balance of an account",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "getAllAccounts",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~getAllAccounts",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{getAllAccounts}",
    "description": "Get data (like the balance) for each account in the tracker",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 107,
    "kind": "function",
    "name": "fetchAllAcounts",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~fetchAllAcounts",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{fetchAllAcounts}",
    "description": "Update the list of wallet accounts.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "startAccountPolling",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~startAccountPolling",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{startAccountPolling}",
    "description": "Start polling for accounts.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "The polling interval in milliseconds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "stopAccountPolling",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~stopAccountPolling",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{stopAccountPolling}",
    "description": "Stop polling for accounts.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "addLocalAcount",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~addLocalAcount",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{addLocalAcount}",
    "description": "Add an account to track locally. (i.e. no interaction with the user)",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "The address of the account to start tracking."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "forgetLocalAccount",
    "memberof": "src/tracking/accounts/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/accounts/actions/index.js~forgetLocalAccount",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/accounts/actions/index.js",
    "importStyle": "{forgetLocalAccount}",
    "description": "Forget local account.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "address",
        "description": "The address of the account to forget."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/tracking/blocks/AT/index.js",
    "content": "\n/**\n * Start polling, for simple non-websocket based Web3 providers such as Metamask.\n * @type {ReduxActionType}\n */\nexport const BLOCKS_START_POLLING = 'BLOCKS_START_POLLING';\n\n/**\n * Stop polling, for simple non-websocket based Web3 providers such as Metamask\n * @type {ReduxActionType}\n */\nexport const BLOCKS_STOP_POLLING = 'BLOCKS_STOP_POLLING';\n\n/**\n * When an error occurs during polling for blocks.\n * @type {ReduxActionType}\n */\nexport const BLOCKS_POLL_ERROR = 'BLOCKS_POLL_ERROR';\n\n/**\n * Starts listening, for websocket based Web3 providers.\n * @type {ReduxActionType}\n */\nexport const BLOCKS_START_LISTENING = 'BLOCKS_START_LISTENING';\n\n/**\n * Stops listening, for websocket based Web3 providers.\n * @type {ReduxActionType}\n */\nexport const BLOCKS_STOP_LISTENING = 'BLOCKS_STOP_LISTENING';\n\n/**\n * Trigger that is used to tunnel the subscription event to a block check.\n * @type {ReduxActionType}\n */\nexport const BLOCKS_SUB_NEW_BLOCK_CHECK = 'BLOCKS_SUB_NEW_BLOCK_CHECK';\n\n/**\n * When an error occurs during listening for blocks.\n * @type {ReduxActionType}\n */\nexport const BLOCKS_LISTEN_ERROR = 'BLOCKS_LISTEN_ERROR';\n\n/**\n * Force get latest block.\n * @type {ReduxActionType}\n */\nexport const GET_LATEST_BLOCK = 'GET_LATEST_BLOCK';\n\n/**\n * Force get a specific block (passed with 'blockHandle').\n * May be removed if it is not within the allowed the block-depth.\n * @type {ReduxActionType}\n */\nexport const GET_BLOCK = 'GET_BLOCK';\n\n/**\n * When retrieving a block fails.\n * @type {ReduxActionType}\n */\nexport const BLOCK_RETRIEVAL_ERROR = 'BLOCK_RETRIEVAL_ERROR';\n\n/**\n * When raw block data was received.\n * @type {ReduxActionType}\n */\nexport const BLOCK_RECEIVED = 'BLOCK_RECEIVED';\n\n/**\n * When block data from \"BLOCK_RECEIVED\" was processed successfully.\n * @type {ReduxActionType}\n */\nexport const BLOCK_PROCESSED = 'BLOCK_PROCESSED';\n\n/**\n * When block data from \"BLOCK_RECEIVED\" could not be processed.\n * @type {ReduxActionType}\n */\nexport const BLOCK_FAILED = 'BLOCK_FAILED';\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/blocks/AT/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "variable",
    "name": "BLOCKS_START_POLLING",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_START_POLLING",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_START_POLLING}",
    "description": "Start polling, for simple non-websocket based Web3 providers such as Metamask.",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "BLOCKS_STOP_POLLING",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_STOP_POLLING",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_STOP_POLLING}",
    "description": "Stop polling, for simple non-websocket based Web3 providers such as Metamask",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "BLOCKS_POLL_ERROR",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_POLL_ERROR",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_POLL_ERROR}",
    "description": "When an error occurs during polling for blocks.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "BLOCKS_START_LISTENING",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_START_LISTENING",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_START_LISTENING}",
    "description": "Starts listening, for websocket based Web3 providers.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "BLOCKS_STOP_LISTENING",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_STOP_LISTENING",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_STOP_LISTENING}",
    "description": "Stops listening, for websocket based Web3 providers.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "BLOCKS_SUB_NEW_BLOCK_CHECK",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_SUB_NEW_BLOCK_CHECK",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_SUB_NEW_BLOCK_CHECK}",
    "description": "Trigger that is used to tunnel the subscription event to a block check.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "BLOCKS_LISTEN_ERROR",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCKS_LISTEN_ERROR",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCKS_LISTEN_ERROR}",
    "description": "When an error occurs during listening for blocks.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "GET_LATEST_BLOCK",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~GET_LATEST_BLOCK",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{GET_LATEST_BLOCK}",
    "description": "Force get latest block.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "GET_BLOCK",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~GET_BLOCK",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{GET_BLOCK}",
    "description": "Force get a specific block (passed with 'blockHandle').\nMay be removed if it is not within the allowed the block-depth.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "BLOCK_RETRIEVAL_ERROR",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCK_RETRIEVAL_ERROR",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCK_RETRIEVAL_ERROR}",
    "description": "When retrieving a block fails.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "BLOCK_RECEIVED",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCK_RECEIVED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCK_RECEIVED}",
    "description": "When raw block data was received.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "BLOCK_PROCESSED",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCK_PROCESSED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCK_PROCESSED}",
    "description": "When block data from \"BLOCK_RECEIVED\" was processed successfully.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "BLOCK_FAILED",
    "memberof": "src/tracking/blocks/AT/index.js",
    "static": true,
    "longname": "src/tracking/blocks/AT/index.js~BLOCK_FAILED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/AT/index.js",
    "importStyle": "{BLOCK_FAILED}",
    "description": "When block data from \"BLOCK_RECEIVED\" could not be processed.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "file",
    "name": "src/tracking/blocks/actions/index.js",
    "content": "import * as blocksAT from '../AT';\n\n/**\n * Start polling blocks.\n *\n * @param interval The polling interval in milliseconds.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const startBlockPolling = interval => (dispatch => dispatch({\n  type: blocksAT.BLOCKS_START_POLLING,\n  interval,\n}));\n\n/**\n * Stop polling blocks. Polling can be resumed later with `startPolling` again.\n *\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const stopBlockPolling = () => (dispatch => dispatch({\n  type: blocksAT.BLOCKS_STOP_POLLING,\n}));\n\n/**\n * Start listening for block headers, a new header will trigger the retrieval of the latest block.\n\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const startBlockListening = () => (dispatch => dispatch({\n  type: blocksAT.BLOCKS_START_LISTENING,\n}));\n\n/**\n * Stop listening for block headers.\n *\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const stopBlockListening = () => (dispatch => dispatch({\n  type: blocksAT.BLOCKS_STOP_LISTENING,\n}));\n\n/**\n * Force retrieval of the latest block.\n *\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const getLatestBlock = () => (dispatch => dispatch({\n  type: blocksAT.GET_LATEST_BLOCK,\n}));\n\n/**\n * Get a specific block.\n * (Warning; block will not be inserted into the state when it's out of scope of the tracking\n * blockDepth. However, the retrieval and events will still be executed.)\n *\n * @param blockHandle The hash, number, of special name (\"genesis\", \"latest\", \"pending\")\n *  of the block to get.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const getBlock = blockHandle => (dispatch => dispatch({\n  type: blocksAT.GET_LATEST_BLOCK,\n  blockHandle,\n}));\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/blocks/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "function",
    "name": "startBlockPolling",
    "memberof": "src/tracking/blocks/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/actions/index.js~startBlockPolling",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/actions/index.js",
    "importStyle": "{startBlockPolling}",
    "description": "Start polling blocks.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "interval",
        "description": "The polling interval in milliseconds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "stopBlockPolling",
    "memberof": "src/tracking/blocks/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/actions/index.js~stopBlockPolling",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/actions/index.js",
    "importStyle": "{stopBlockPolling}",
    "description": "Stop polling blocks. Polling can be resumed later with `startPolling` again.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 129,
    "kind": "function",
    "name": "startBlockListening",
    "memberof": "src/tracking/blocks/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/actions/index.js~startBlockListening",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/actions/index.js",
    "importStyle": "{startBlockListening}",
    "description": "Start listening for block headers, a new header will trigger the retrieval of the latest block.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "stopBlockListening",
    "memberof": "src/tracking/blocks/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/actions/index.js~stopBlockListening",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/actions/index.js",
    "importStyle": "{stopBlockListening}",
    "description": "Stop listening for block headers.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "getLatestBlock",
    "memberof": "src/tracking/blocks/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/actions/index.js~getLatestBlock",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/actions/index.js",
    "importStyle": "{getLatestBlock}",
    "description": "Force retrieval of the latest block.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "getBlock",
    "memberof": "src/tracking/blocks/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/actions/index.js~getBlock",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/actions/index.js",
    "importStyle": "{getBlock}",
    "description": "Get a specific block.\n(Warning; block will not be inserted into the state when it's out of scope of the tracking\nblockDepth. However, the retrieval and events will still be executed.)",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blockHandle",
        "description": "The hash, number, of special name (\"genesis\", \"latest\", \"pending\")\n of the block to get."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/tracking/blocks/blocksRed.js",
    "content": "import * as blocksAT from './AT';\nimport mappedReducer from '../../util/mapped-reducer';\n\nconst initialState = {\n  // Last X blocks, mapped with block hash as key\n  blocks: {\n    // empty initially\n  },\n  latest: {\n    number: 0,\n    hash: null\n  },\n  maxBlockDepth: 24\n};\n\nconst mapping = {\n  [blocksAT.BLOCK_FAILED]: (state, action) => ({\n    ...state,\n    accountsMap: action.accountsMap\n  }),\n  [blocksAT.BLOCK_RECEIVED]: (state, action) => {\n    const newLatestBlockNr = action.block.number > state.latest.number\n      ? action.block.number\n      : state.latest.number;\n    return ({\n      ...state,\n      blocks: Object.assign(\n        {},\n        // filter the blocks, throw away blocks that are out of scope (i.e. too old).\n        ...(Object.entries(state.blocks).filter(\n          // eslint-disable-next-line no-unused-vars\n          ([key, value]) => state.maxBlockDepth > (newLatestBlockNr - value.number)\n        ).map(([key, value]) => ({[key]: value}))),\n        ((state.maxBlockDepth > (state.latest.number - action.block.number)) && {\n          [action.block.hash]: action.block\n        })\n      ),\n      // if the new block is higher, update the latest block\n      ...((state.latest.number < action.block.number) && {\n        latest: {\n          number: action.block.number,\n          hash: action.block.hash\n        }\n      })\n    });\n  },\n  [blocksAT.BLOCK_PROCESSED]: (state, action) => ({\n    ...state,\n    blocks: {\n      ...state.blocks,\n      [action.block.hash]: {\n        ...state.blocks[action.block.hash],\n        processed: true\n      }\n    },\n  }),\n  [blocksAT.BLOCK_FAILED]: (state, action) => ({\n    ...state,\n    blocks: {\n      ...state.blocks,\n      [action.block.hash]: {\n        ...state.blocks[action.block.hash],\n        processed: false,\n        processError: action.processError\n      }\n    },\n  })\n};\n\n/**\n * Blocks reducer of redapp.\n * @type {ReduxReducer}\n */\nexport default mappedReducer(mapping, initialState);\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/blocks/blocksRed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "initialState",
    "memberof": "src/tracking/blocks/blocksRed.js",
    "static": true,
    "longname": "src/tracking/blocks/blocksRed.js~initialState",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"blocks\": *, \"latest\": *, \"maxBlockDepth\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "mapping",
    "memberof": "src/tracking/blocks/blocksRed.js",
    "static": true,
    "longname": "src/tracking/blocks/blocksRed.js~mapping",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "file",
    "name": "src/tracking/blocks/blocksSaga.js",
    "content": "import {\n  call, fork, put, select, takeEvery, takeLatest\n} from 'redux-saga/effects';\nimport poller from '../../util/poller';\nimport subber from '../../util/subber';\nimport * as blocksAT from './AT';\n\n/**\n * @param web3 Web3 handle.\n * @param action The action to handle.\n * @param action.blockHandle The hash, number,\n *  of special name (\"genesis\", \"latest\", \"pending\") of the block to get.\n * @returns {ReduxSaga} Saga generator\n */\nfunction* getSpecificBlock(web3, {blockHandle}) {\n  try {\n    // Get the block, and put it into the store.\n    const block = yield call(web3.eth.getBlock, blockHandle);\n    yield put({\n      type: blocksAT.BLOCK_RECEIVED,\n      // isolate block data from the action, i.e. add as payload named 'block'\n      block\n    });\n  } catch (err) {\n    yield put({\n      type: blocksAT.BLOCK_RETRIEVAL_ERROR,\n      blockHandle,\n      err: err.message\n    });\n  }\n}\n\nfunction* getLatestBlock(web3) {\n  // Simply use the special 'latest' handle to get the latest block.\n  yield call(getSpecificBlock, web3, {blockHandle: 'latest'});\n}\n\nfunction* handleNewBlock(web3, getBlocksState, blockDepth, {block: {parentHash, number}}) {\n  // continue looking for the ancestor blocks\n  //  until we find a known older block, or got $blockDepth blocks in the store.\n  const latestBlock = yield select(state => getBlocksState(state).latest.number);\n  const parentBlock = yield select(state => getBlocksState(state).blocks[parentHash]);\n  // If we don't know the parent block, and the current block number is within the\n  //  block depth range to track, then try to get the parent block.\n  // TODO: double check range\n  if (!parentBlock && (latestBlock - blockDepth) < number) {\n    yield put({type: blocksAT.GET_BLOCK, blockHandle: parentHash});\n  }\n}\n\nfunction* blocksPollWorker(web3, getBlocksState) {\n  const reportedNumber = yield call(web3.eth.getBlockNumber);\n  const stateNumber = yield select(state => getBlocksState(state).latest.number);\n  // Retrieve the data of the block if we know the block will be higher than we already have.\n  if (reportedNumber > stateNumber) {\n    // We know the exact block number, but try get the latest anyway.\n    // Maybe we are lagging behind badly,\n    //  and then it's better to just skip and back-fill only the necessary depth.\n    // Also, duplicate GET_LATEST_BLOCK actions are reduced to only the latest.\n    yield put({type: blocksAT.GET_LATEST_BLOCK});\n  }\n}\n\nfunction* blocksPollError(err) {\n  yield put({type: blocksAT.BLOCKS_POLL_ERROR, err: err.message});\n}\n\nfunction* blocksSubWorker(web3, getBlocksState, {number, hash}) {\n  // if it has no hash, than we got a pending block. Ignore it.\n  if (!hash) return;\n\n  // \"number\": the block-number from the block-header received from the subscription.\n  const stateNumber = yield select(state => getBlocksState(state).latest.number);\n  // Retrieve the data of the block if we know the block will be higher than we already have.\n  if (number > stateNumber) {\n    yield call(getLatestBlock, web3);\n  }\n}\n\n/**\n * Handles ReDApp block background processing.\n * @param web3 The web3js 1.0 instance to use.\n * @param {ReduxStateSelector} getBlocksState Gets blocks state\n *  (obj. incl. both `blocks` and `latest`)\n * @return {ReduxSaga} Blocks saga.\n */\nfunction* blocksSaga(web3, getBlocksState) {\n  // Get block depth from the store.\n  const blockDepth = (yield select(state => getBlocksState(state).maxBlockDepth)) || 24;\n\n  // Polling system, only intended for non-stream based RPC, e.g. metamask (over http).\n  yield fork(poller(\n    blocksAT.BLOCKS_START_POLLING,\n    blocksAT.BLOCKS_STOP_POLLING,\n    blocksPollWorker,\n    blocksPollError,\n    web3, getBlocksState\n  ));\n\n  yield fork(subber(\n    blocksAT.BLOCKS_START_LISTENING,\n    blocksAT.BLOCKS_STOP_LISTENING,\n    // Get the full block, the header has slightly less data (Compared to getBlock without TXs)\n    blocksAT.BLOCKS_SUB_NEW_BLOCK_CHECK,\n    // \"changed\" events are never fired by block-headers subscription, bad generalization of web3js\n    null,\n    blocksAT.BLOCKS_LISTEN_ERROR,\n    () => web3.eth.subscribe('newBlockHeaders')\n  ));\n  yield takeEvery(blocksAT.BLOCK_RECEIVED, handleNewBlock, web3, getBlocksState, blockDepth);\n  yield takeLatest(blocksAT.GET_LATEST_BLOCK, getLatestBlock, web3);\n  yield takeEvery(blocksAT.GET_BLOCK, getSpecificBlock, web3);\n  yield takeEvery(blocksAT.BLOCKS_SUB_NEW_BLOCK_CHECK, blocksSubWorker, web3, getBlocksState);\n}\n\nexport default blocksSaga;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/blocks/blocksSaga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 137,
    "kind": "function",
    "name": "getSpecificBlock",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~getSpecificBlock",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxSaga} Saga generator"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "Web3 handle."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "The action to handle."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "action.blockHandle",
        "description": "The hash, number,\n of special name (\"genesis\", \"latest\", \"pending\") of the block to get."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "Saga generator"
    }
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "getLatestBlock",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~getLatestBlock",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "function",
    "name": "handleNewBlock",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~handleNewBlock",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "getBlocksState",
        "types": [
          "*"
        ]
      },
      {
        "name": "blockDepth",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern3",
        "types": [
          "{\"block\": *}"
        ],
        "defaultRaw": {
          "block": null
        },
        "defaultValue": "{\"block\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "blocksPollWorker",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~blocksPollWorker",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "getBlocksState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 141,
    "kind": "function",
    "name": "blocksPollError",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~blocksPollError",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "blocksSubWorker",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~blocksSubWorker",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "getBlocksState",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern2",
        "types": [
          "{\"number\": *, \"hash\": *}"
        ],
        "defaultRaw": {
          "number": null,
          "hash": null
        },
        "defaultValue": "{\"number\":null,\"hash\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "function",
    "name": "blocksSaga",
    "memberof": "src/tracking/blocks/blocksSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/blocks/blocksSaga.js~blocksSaga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/blocks/blocksSaga.js",
    "importStyle": "blocksSaga",
    "description": "Handles ReDApp block background processing.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3js 1.0 instance to use."
      },
      {
        "nullable": null,
        "types": [
          "ReduxStateSelector"
        ],
        "spread": false,
        "optional": false,
        "name": "getBlocksState",
        "description": "Gets blocks state\n (obj. incl. both `blocks` and `latest`)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "Blocks saga."
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/tracking/calls/AT/index.js",
    "content": "\n/**\n * Call, but try to hit local redux cache first. If not in cache, a FORCE_CALL will be fired.\n * @type {ReduxActionType}\n */\nexport const CACHE_CALL = 'CACHE_CALL';\n\n/**\n * Wipe the cache.\n * @type {ReduxActionType}\n */\nexport const CLEAR_CACHE = 'CLEAR_CACHE';\n\n/**\n * Remove a single call from the cache.\n * @type {ReduxActionType}\n */\nexport const FORGET_CALL = 'FORGET_CALL';\n\n/**\n * Call, ignoring the cache.\n * @type {ReduxActionType}\n */\nexport const FORCE_CALL = 'FORCE_CALL';\n\n/**\n * When a call promise is completed by web3, adds the raw result to the cache.\n * @type {ReduxActionType}\n */\nexport const CALL_RETURNED = 'CALL_RETURNED';\n\n/**\n * When a call is decoded, after `CALL_RETURNED`.\n * @type {ReduxActionType}\n */\nexport const CALL_DECODE_SUCCESS = 'CALL_DECODE_SUCCESS';\n\n/**\n * When a call failed to be decoded but was otherwise successful.\n * @type {ReduxActionType}\n */\nexport const CALL_DECODE_FAIL = 'CALL_DECODE_FAIL';\n\n/**\n * When the call failed, (e.g. invalid block number).\n * @type {ReduxActionType}\n */\nexport const CALL_FAILED = 'CALL_FAILED';\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/calls/AT/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "CACHE_CALL",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~CACHE_CALL",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{CACHE_CALL}",
    "description": "Call, but try to hit local redux cache first. If not in cache, a FORCE_CALL will be fired.",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "variable",
    "name": "CLEAR_CACHE",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~CLEAR_CACHE",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{CLEAR_CACHE}",
    "description": "Wipe the cache.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "FORGET_CALL",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~FORGET_CALL",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{FORGET_CALL}",
    "description": "Remove a single call from the cache.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "FORCE_CALL",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~FORCE_CALL",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{FORCE_CALL}",
    "description": "Call, ignoring the cache.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "CALL_RETURNED",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~CALL_RETURNED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{CALL_RETURNED}",
    "description": "When a call promise is completed by web3, adds the raw result to the cache.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "CALL_DECODE_SUCCESS",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~CALL_DECODE_SUCCESS",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{CALL_DECODE_SUCCESS}",
    "description": "When a call is decoded, after `CALL_RETURNED`.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "CALL_DECODE_FAIL",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~CALL_DECODE_FAIL",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{CALL_DECODE_FAIL}",
    "description": "When a call failed to be decoded but was otherwise successful.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "CALL_FAILED",
    "memberof": "src/tracking/calls/AT/index.js",
    "static": true,
    "longname": "src/tracking/calls/AT/index.js~CALL_FAILED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/AT/index.js",
    "importStyle": "{CALL_FAILED}",
    "description": "When the call failed, (e.g. invalid block number).",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/tracking/calls/actions/index.js",
    "content": "import * as callsAT from '../AT';\n\n/**\n * Start a new call, but try to hit the cache for an existing call result first.\n * Note: the `callID` is used to match with a previous call:\n *  the `callID` should be formatted consistently, based on address, calldata, and block-number,\n *   to hit the cache properly.\n * The format used internally by ReDApp contract calls is:\n * `${to}-${Web3Utils.soliditySha3(data)}-${blockNr || 'latest'}`\n *\n * @param options Options for this call.\n * @param options.from The call sender address. Optional.\n * @param options.to The call destination address, i.e. the contract address.\n * @param options.data ABI encoded call-data.\n *  E.g. a method signature + encoded arguments for a regular contract function.\n * @param options.blockNr The block number to use, format corresponding to web3.js\n *  formatting: a number, or special value like 'latest'. Optional, web3.js defaults to 'latest'.\n * @param options.callID The ID to use within the tracking system.\n *  Optional, a new ID (uuid v4) is used when not set.\n * @param options.outputsABI The ABI spec of the expected outputs. Optional, if set,\n *  the raw resulting value will be decoded and stored with the other data in the store.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const cacheCall = ({ from, to, data, blockNr, callID, outputsABI }) => (\n  dispatch => dispatch({\n    type: callsAT.CACHE_CALL,\n    from,\n    to,\n    data,\n    blockNr,\n    callID,\n    outputsABI,\n  })\n);\n\n/**\n * Start a new call, ignoring previous call data, forcing an overwrite when getting the result.\n *\n * @param options Options for this call.\n * @param options.from The call sender address. Optional.\n * @param options.to The call destionation address, i.e. the contract address.\n * @param options.data ABI encoded call-data.\n *  E.g. a method signature + encoded arguments for a regular contract function.\n * @param options.blockNr The block number to use, format corresponding to web3.js\n *  formatting: a number, or special value like 'latest'. Optional, web3.js defaults to 'latest'.\n * @param options.callID The ID to use within the tracking system.\n *  Optional, a new ID (uuid v4) is used when not set.\n * @param options.outputsABI The ABI spec of the expected outputs. Optional, if set,\n *  the raw resulting value will be decoded and stored with the other data in the store.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const forceCall = ({ from, to, data, blockNr, callID, outputsABI }) => (\n  dispatch => dispatch({\n    type: callsAT.FORCE_CALL,\n    from,\n    to,\n    data,\n    blockNr,\n    callID,\n    outputsABI,\n  })\n);\n\n/**\n * Remove a call from the tracking system.\n * Note: this does not cancel the call if it was already sent to the web3 instance.\n * @param callID The ID of the call to remove.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const forgetCall = callID => (dispatch => dispatch({\n  type: callsAT.FORGET_CALL,\n  callID,\n}));\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/calls/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "cacheCall",
    "memberof": "src/tracking/calls/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/actions/index.js~cacheCall",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/actions/index.js",
    "importStyle": "{cacheCall}",
    "description": "Start a new call, but try to hit the cache for an existing call result first.\nNote: the `callID` is used to match with a previous call:\n the `callID` should be formatted consistently, based on address, calldata, and block-number,\n  to hit the cache properly.\nThe format used internally by ReDApp contract calls is:\n`${to}-${Web3Utils.soliditySha3(data)}-${blockNr || 'latest'}`",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options for this call."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.from",
        "description": "The call sender address. Optional."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.to",
        "description": "The call destination address, i.e. the contract address."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": "ABI encoded call-data.\n E.g. a method signature + encoded arguments for a regular contract function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.blockNr",
        "description": "The block number to use, format corresponding to web3.js\n formatting: a number, or special value like 'latest'. Optional, web3.js defaults to 'latest'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callID",
        "description": "The ID to use within the tracking system.\n Optional, a new ID (uuid v4) is used when not set."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.outputsABI",
        "description": "The ABI spec of the expected outputs. Optional, if set,\n the raw resulting value will be decoded and stored with the other data in the store."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "forceCall",
    "memberof": "src/tracking/calls/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/actions/index.js~forceCall",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/actions/index.js",
    "importStyle": "{forceCall}",
    "description": "Start a new call, ignoring previous call data, forcing an overwrite when getting the result.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options for this call."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.from",
        "description": "The call sender address. Optional."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.to",
        "description": "The call destionation address, i.e. the contract address."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": "ABI encoded call-data.\n E.g. a method signature + encoded arguments for a regular contract function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.blockNr",
        "description": "The block number to use, format corresponding to web3.js\n formatting: a number, or special value like 'latest'. Optional, web3.js defaults to 'latest'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.callID",
        "description": "The ID to use within the tracking system.\n Optional, a new ID (uuid v4) is used when not set."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.outputsABI",
        "description": "The ABI spec of the expected outputs. Optional, if set,\n the raw resulting value will be decoded and stored with the other data in the store."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "forgetCall",
    "memberof": "src/tracking/calls/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/actions/index.js~forgetCall",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/actions/index.js",
    "importStyle": "{forgetCall}",
    "description": "Remove a call from the tracking system.\nNote: this does not cancel the call if it was already sent to the web3 instance.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callID",
        "description": "The ID of the call to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/tracking/calls/awaitCall.js",
    "content": "import {put} from 'redux-saga/effects';\nimport * as callsAT from './AT';\n\n/**\n * Awaits a web3 call, and fires the corresponding redux events\n *\n * @param callPromise The call promise, eventually completes with the call result, or fails.\n * @param callID The ID of the call, used in the caching system.\n * @returns {Promise} The promise, complete when the given callPromise is processed.\n */\nfunction* awaitCall(callPromise, callID) {\n  try {\n    // TODO: should we apply a time-out here, or does the web3 provider stop it anyway?\n\n    // Note: the outer \"call\" being made here is a redux-saga call that makes this generator\n    //  effectively await the promise, without taking away the power of orchestration\n    //  (what \"await ...\" would do)\n    // The inner call is the Web3 contract call, returning a promise.\n    const callResult = yield callPromise;\n\n    yield put({type: callsAT.CALL_RETURNED, callID, rawValue: callResult});\n  } catch (err) {\n    // Handle failure, forward error, user can check what happened.\n    yield put({type: callsAT.CALL_FAILED, callID, err});\n  }\n}\n\nexport default awaitCall;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/calls/awaitCall.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "awaitCall",
    "memberof": "src/tracking/calls/awaitCall.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/awaitCall.js~awaitCall",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/awaitCall.js",
    "importStyle": "awaitCall",
    "description": "Awaits a web3 call, and fires the corresponding redux events",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} The promise, complete when the given callPromise is processed."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callPromise",
        "description": "The call promise, eventually completes with the call result, or fails."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callID",
        "description": "The ID of the call, used in the caching system."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The promise, complete when the given callPromise is processed."
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/tracking/calls/callsRed.js",
    "content": "import * as callsAT from './AT';\nimport mappedReducer from '../../util/mapped-reducer';\n\nconst initialState = {\n  // no calls initially\n};\n\n/*\n  cache structure:\n\n  cache: {\n    // key, or \"callID\", is the hex string of the soldity-sha3 hash of the arguments,\n    // suffixed with \"-\", and then the blocknumber that was used.\n    \"0xDEADBEEF\": {\n      status: \"success\"/\"failed\"/\"in-progress\",\n      rawValue: ...., // raw returned data\n      value: ..., // decoded data, if a decoder was available\n      decoder: (data) => value, // decoding function\n      block: block number used, e.g. \"latest\", or \"123\"\n    },\n    ....more call cache entries\n  }\n*/\n\nconst mapping = {\n  [callsAT.FORCE_CALL]: (state, { callID, blockNr, outputsABI }) => ({\n    ...state,\n    // Create a new cache entry if it does not already exist\n    [callID]: state[callID] || {\n      status: 'in-progress',\n      rawValue: undefined,\n      value: undefined,\n      decodeFail: false,\n      outputsABI,\n      blockNr // blockNr is optional\n    }\n  }),\n\n  [callsAT.CALL_RETURNED]: (state, { callID, rawValue }) => ({\n    ...state,\n    [callID]: {\n      // keep old state; blockNr is still there.\n      ...state[callID],\n      status: 'success',\n      rawValue\n    }\n  }),\n\n  [callsAT.CALL_FAILED]: (state, { callID, err }) => ({\n    ...state,\n    [callID]: {\n      // keep old state; blockNr is still there.\n      ...state[callID],\n      status: 'failed',\n      rawValue: null,\n      value: null,\n      err\n    }\n  }),\n\n  [callsAT.CALL_DECODE_SUCCESS]: (state, { callID, value }) => ({\n    ...state,\n    [callID]: {\n      ...state[callID],\n      value\n    }\n  }),\n\n  [callsAT.CALL_DECODE_FAIL]: (state, { callID, err }) => ({\n    ...state,\n    [callID]: {\n      ...state[callID],\n      value: null,\n      err\n    }\n  }),\n\n  [callsAT.CLEAR_CACHE]: () => ({\n    // cache is empty now.\n  }),\n\n  [callsAT.FORGET_CALL]: (state, { callID }) => {\n    const res = {...state};\n    delete res[callID];\n    return res;\n  }\n};\n\n/**\n * Calls reducer of redapp.\n * @type {ReduxReducer}\n */\nexport default mappedReducer(mapping, initialState);\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/calls/callsRed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "initialState",
    "memberof": "src/tracking/calls/callsRed.js",
    "static": true,
    "longname": "src/tracking/calls/callsRed.js~initialState",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/calls/callsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "variable",
    "name": "mapping",
    "memberof": "src/tracking/calls/callsRed.js",
    "static": true,
    "longname": "src/tracking/calls/callsRed.js~mapping",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/calls/callsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/tracking/calls/callsSaga.js",
    "content": "import {\n  takeEvery, call, select, put\n} from 'redux-saga/effects';\nimport uuid4 from 'uuid/v4';\nimport * as callsAT from './AT';\nimport awaitCall from './awaitCall';\n\n/**\n * Initiate a web3 call, it starts waiting for a promise that is mapped\n *  to our redux call system.\n *\n * @param web3 The web3 instance to use when sending the actual TX.\n * @param callID The ID of the transaction, used in the tracking system.\n * @param blockNr The block number to use in the computation of the call, as call context.\n *                (Optional, web3 defaults to the \"latest\" block).\n * @param callParams The call parameters\n * @param callParams.from Senders address, optional. (default wallet otherwise)\n * @param callParams.to Destination address, or undefined for contract creation.\n * @param callParams.data Optional. TX data, i.e. abi encoded contract call,\n *              or contract code itself for contract creation. (99% of calls should have it though.)\n * @returns {Promise} The redux saga channel.\n */\nconst initiateCall = (web3, callID, blockNr, {from, to, data}) => {\n  // Web3 returns a simple promise here, no complex emitter object.\n  // Now all we have to do is wait for it to complete, and then fire the corresponding event.\n  const callPromise = web3.eth.call({from, to, data}, blockNr);\n\n  // simply return the wrapped promise, it will be handled as a single-element iterable\n  return awaitCall(callPromise, callID);\n};\n\n\nfunction* forceCall(web3, {from, to, data, blockNr, callID}) {\n  // If the user does not specify any ID, than create a new one.\n  // This new ID is formatted differently from than the one used by contracts making cache-calls;\n  //  users should use their own ID when sending direct raw transactions (recommended).\n  // If none was provided, then a random one will be sufficient\n  //  (i.e. user can search for it in the redux store).\n  const id = callID || uuid4();\n\n  // Create TX channel, firing redux events based on all promises from web3.\n  yield call(initiateCall, web3, id, blockNr, {from, to, data});\n}\n\n\nfunction* cacheCall(getCallsState, {from, to, data, blockNr, callID, outputsABI}) {\n  const id = callID || uuid4();\n\n  // check if we hit the cache.\n  const cached = yield select(state => getCallsState(state)[id]);\n\n  if (!cached) {\n    yield put({type: callsAT.FORCE_CALL, from, to, data, blockNr, callID: id, outputsABI});\n  }\n  // TODO: the else case: we could fire a \"cache is hit\" event, but we probably don't need it.\n}\n\nfunction* decodeCall(web3, getCallsState, {callID, rawValue}) {\n  const outputsABI = yield select(state => getCallsState(state)[callID].outputsABI);\n  // if no outputsABI is available, then we can't decode it.\n  // The user will have to do with the rawValue.\n  if (outputsABI) {\n    try {\n      // We have the outputs ABI, let's decode the raw bytes\n      // The '0x' string is special: we know it just means that there is no data,\n      //  don't try to decode (which would result in an error),\n      //  just tell with the decoded data that it is non-existant.\n      const value = rawValue === '0x' ? null\n        : web3.eth.abi.decodeParameters(outputsABI, rawValue);\n\n      yield put({\n        type: callsAT.CALL_DECODE_SUCCESS,\n        callID,\n        value,\n      });\n    } catch (err) {\n      yield put({\n        type: callsAT.CALL_DECODE_FAIL,\n        callID,\n        err\n      });\n    }\n  }\n}\n\n/**\n * Handles ReDApp call background processing.\n * @param web3 The web3js 1.0 instance to use.\n * @param {ReduxStateSelector} getCallsState Gets calls state.\n * @return {ReduxSaga} Calls saga.\n */\nfunction* callsSaga(web3, getCallsState) {\n  yield takeEvery(callsAT.CACHE_CALL, cacheCall, getCallsState);\n  yield takeEvery(callsAT.FORCE_CALL, forceCall, web3);\n  yield takeEvery(callsAT.CALL_RETURNED, decodeCall, web3, getCallsState);\n}\n\nexport default callsSaga;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/calls/callsSaga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "initiateCall",
    "memberof": "src/tracking/calls/callsSaga.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/callsSaga.js~initiateCall",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/calls/callsSaga.js",
    "importStyle": null,
    "description": "Initiate a web3 call, it starts waiting for a promise that is mapped\n to our redux call system.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} The redux saga channel."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3 instance to use when sending the actual TX."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callID",
        "description": "The ID of the transaction, used in the tracking system."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blockNr",
        "description": "The block number to use in the computation of the call, as call context.\n               (Optional, web3 defaults to the \"latest\" block)."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callParams",
        "description": "The call parameters"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callParams.from",
        "description": "Senders address, optional. (default wallet otherwise)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callParams.to",
        "description": "Destination address, or undefined for contract creation."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callParams.data",
        "description": "Optional. TX data, i.e. abi encoded contract call,\n             or contract code itself for contract creation. (99% of calls should have it though.)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The redux saga channel."
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "forceCall",
    "memberof": "src/tracking/calls/callsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/callsSaga.js~forceCall",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/calls/callsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"from\": *, \"to\": *, \"data\": *, \"blockNr\": *, \"callID\": *}"
        ],
        "defaultRaw": {
          "from": null,
          "to": null,
          "data": null,
          "blockNr": null,
          "callID": null
        },
        "defaultValue": "{\"from\":null,\"to\":null,\"data\":null,\"blockNr\":null,\"callID\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "cacheCall",
    "memberof": "src/tracking/calls/callsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/callsSaga.js~cacheCall",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/calls/callsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "getCallsState",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"from\": *, \"to\": *, \"data\": *, \"blockNr\": *, \"callID\": *, \"outputsABI\": *}"
        ],
        "defaultRaw": {
          "from": null,
          "to": null,
          "data": null,
          "blockNr": null,
          "callID": null,
          "outputsABI": null
        },
        "defaultValue": "{\"from\":null,\"to\":null,\"data\":null,\"blockNr\":null,\"callID\":null,\"outputsABI\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "decodeCall",
    "memberof": "src/tracking/calls/callsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/callsSaga.js~decodeCall",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/calls/callsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "getCallsState",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern2",
        "types": [
          "{\"callID\": *, \"rawValue\": *}"
        ],
        "defaultRaw": {
          "callID": null,
          "rawValue": null
        },
        "defaultValue": "{\"callID\":null,\"rawValue\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "callsSaga",
    "memberof": "src/tracking/calls/callsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/calls/callsSaga.js~callsSaga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/calls/callsSaga.js",
    "importStyle": "callsSaga",
    "description": "Handles ReDApp call background processing.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3js 1.0 instance to use."
      },
      {
        "nullable": null,
        "types": [
          "ReduxStateSelector"
        ],
        "spread": false,
        "optional": false,
        "name": "getCallsState",
        "description": "Gets calls state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "Calls saga."
    }
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/tracking/trackingRed.js",
    "content": "import { combineReducers } from 'redux';\n\nimport accountsRed from './accounts/accountsRed';\nimport blocksRed from './blocks/blocksRed';\nimport transactionsRed from './transactions/transactionsRed';\nimport callsRed from './calls/callsRed';\n\n/**\n * Tracking reducer of redapp.\n * @type {ReduxReducer}\n */\nconst trackingRed = combineReducers({\n  accounts: accountsRed,\n  blocks: blocksRed,\n  transactions: transactionsRed,\n  calls: callsRed\n});\n\nexport default trackingRed;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/trackingRed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "trackingRed",
    "memberof": "src/tracking/trackingRed.js",
    "static": true,
    "longname": "src/tracking/trackingRed.js~trackingRed",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/trackingRed.js",
    "importStyle": "trackingRed",
    "description": "Tracking reducer of redapp.",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "ReduxReducer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "file",
    "name": "src/tracking/trackingSaga.js",
    "content": "import { all, fork } from 'redux-saga/effects';\n\nimport accountsSaga from './accounts/accountsSaga';\nimport blocksSaga from './blocks/blocksSaga';\nimport callsSaga from './calls/callsSaga';\nimport transactionsSaga from './transactions/transactionsSaga';\n\n/**\n * Forks to tracking and contracts saga.\n * @param web3 The web3js 1.0 instance to use.\n * @param {ReduxStateSelector} getTrackingState Gets tracking state.\n * @return {ReduxSaga} Tracking saga.\n */\nexport default function* trackingSaga(web3, getTrackingState) {\n  yield all([\n    fork(accountsSaga, web3, state => getTrackingState(state).accounts),\n    fork(blocksSaga, web3, state => getTrackingState(state).blocks),\n    fork(callsSaga, web3, state => getTrackingState(state).calls),\n    fork(transactionsSaga, web3, state => getTrackingState(state).transactions)\n  ]);\n}\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/trackingSaga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "trackingSaga",
    "memberof": "src/tracking/trackingSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/trackingSaga.js~trackingSaga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/trackingSaga.js",
    "importStyle": "trackingSaga",
    "description": "Forks to tracking and contracts saga.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3js 1.0 instance to use."
      },
      {
        "nullable": null,
        "types": [
          "ReduxStateSelector"
        ],
        "spread": false,
        "optional": false,
        "name": "getTrackingState",
        "description": "Gets tracking state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "Tracking saga."
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/tracking/transactions/AT/index.js",
    "content": "\n/**\n * Send a transaction, to be tracked.\n * @type {ReduxActionType}\n */\nexport const SEND_TX = 'SEND_TX';\n\n/**\n * After starting sending a transaction to the web3provider successfully, it's not broadcast yet!\n * @type {ReduxActionType}\n */\nexport const TX_SENT = 'TX_SENT';\n\n/**\n * When sending errors, i.e. the web3provider fails before even broadcasting the transaction.\n * @type {ReduxActionType}\n */\nexport const SEND_TX_FAILED = 'SEND_TX_FAILED';\n\n/**\n * When a tx has been broadcast.\n * @type {ReduxActionType}\n */\nexport const TX_BROADCAST = 'TX_BROADCAST';\n\n/**\n * When a receipt was received, may be multiple times in case of chain re-organization.\n * @type {ReduxActionType}\n */\nexport const TX_RECEIPT = 'TX_RECEIPT';\n\n/**\n * Failed, fired after processing \"TX_RECEIPT\", or on edge cases.\n * @type {ReduxActionType}\n */\n/**\n * Has a \"receipt\" if it was a mining failure (e.g. out of gas).\n * @type {ReduxActionType}\n */\nexport const TX_FAILED = 'TX_FAILED';\n\n/**\n * When web3 explicitly provided us with 12 chained confirmations.\n * @type {ReduxActionType}\n */\nexport const TX_FINAL = 'TX_FINAL';\n\n/**\n * Remove TX from the tracker.\n * @type {ReduxActionType}\n */\nexport const FORGET_TX = 'FORGET_TX';\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/transactions/AT/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "variable",
    "name": "SEND_TX",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~SEND_TX",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{SEND_TX}",
    "description": "Send a transaction, to be tracked.",
    "lineNumber": 6,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "variable",
    "name": "TX_SENT",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~TX_SENT",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{TX_SENT}",
    "description": "After starting sending a transaction to the web3provider successfully, it's not broadcast yet!",
    "lineNumber": 12,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "variable",
    "name": "SEND_TX_FAILED",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~SEND_TX_FAILED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{SEND_TX_FAILED}",
    "description": "When sending errors, i.e. the web3provider fails before even broadcasting the transaction.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "TX_BROADCAST",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~TX_BROADCAST",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{TX_BROADCAST}",
    "description": "When a tx has been broadcast.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "TX_RECEIPT",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~TX_RECEIPT",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{TX_RECEIPT}",
    "description": "When a receipt was received, may be multiple times in case of chain re-organization.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "TX_FAILED",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~TX_FAILED",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{TX_FAILED}",
    "description": "Has a \"receipt\" if it was a mining failure (e.g. out of gas).",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "TX_FINAL",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~TX_FINAL",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{TX_FINAL}",
    "description": "When web3 explicitly provided us with 12 chained confirmations.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "variable",
    "name": "FORGET_TX",
    "memberof": "src/tracking/transactions/AT/index.js",
    "static": true,
    "longname": "src/tracking/transactions/AT/index.js~FORGET_TX",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/AT/index.js",
    "importStyle": "{FORGET_TX}",
    "description": "Remove TX from the tracker.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "ReduxActionType"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "src/tracking/transactions/actions/index.js",
    "content": "import * as transactionsAT from '../AT';\n\n/**\n * Send a transaction, which will be tracked in the ReDApp tracking system.\n *\n * @param options Options\n * @param options.from The transaction sender address.\n * @param options.to The transaction destination address.\n *  Optional, e.g. not used for contract deployments.\n * @param options.value The value, ETH. Optional, defaults to 0.\n * @param options.gas Gas, in wei. Optional, can be calculated on the fly by web3 provider.\n * @param options.gasPrice Gas price. Optional, can be set by web3 provider later on.\n * @param options.data ABI encoded data to send with the transaction.\n *  Used for contract deploying and contract interaction.\n *  Optional, e.g. a normal ETH transfer.\n * @param options.nonce The transaction nonce.\n *  Optional, can be determined automatically by the web3 provider.\n * @param options.txID The ID to use within the tracking system.\n *  Optional, a new ID (uuid v4) is used when not set.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const sendTX = ({ from, to, value, gas, gasPrice, data, nonce, txID }) => (\n  dispatch => dispatch({\n    type: transactionsAT.SEND_TX,\n    from,\n    to,\n    value,\n    gas,\n    gasPrice,\n    data,\n    nonce,\n    txID,\n  })\n);\n\n/**\n * Remove a transaction from the tracking system.\n * Note: this does not cancel the transaction if it was already sent to the web3 instance\n *  (it may still be broadcasted, if wasn't already)\n * @param txID The ID of the transaction to remove.\n * @returns {ReduxThunk} Redux thunk, dispatch to run action.\n */\nexport const forgetTX = txID => (dispatch => dispatch({\n  type: transactionsAT.FORGET_TX,\n  txID,\n}));\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/transactions/actions/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "function",
    "name": "sendTX",
    "memberof": "src/tracking/transactions/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/actions/index.js~sendTX",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/actions/index.js",
    "importStyle": "{sendTX}",
    "description": "Send a transaction, which will be tracked in the ReDApp tracking system.",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.from",
        "description": "The transaction sender address."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.to",
        "description": "The transaction destination address.\n Optional, e.g. not used for contract deployments."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.value",
        "description": "The value, ETH. Optional, defaults to 0."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.gas",
        "description": "Gas, in wei. Optional, can be calculated on the fly by web3 provider."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.gasPrice",
        "description": "Gas price. Optional, can be set by web3 provider later on."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": "ABI encoded data to send with the transaction.\n Used for contract deploying and contract interaction.\n Optional, e.g. a normal ETH transfer."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.nonce",
        "description": "The transaction nonce.\n Optional, can be determined automatically by the web3 provider."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options.txID",
        "description": "The ID to use within the tracking system.\n Optional, a new ID (uuid v4) is used when not set."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 183,
    "kind": "function",
    "name": "forgetTX",
    "memberof": "src/tracking/transactions/actions/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/actions/index.js~forgetTX",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/actions/index.js",
    "importStyle": "{forgetTX}",
    "description": "Remove a transaction from the tracking system.\nNote: this does not cancel the transaction if it was already sent to the web3 instance\n (it may still be broadcasted, if wasn't already)",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReduxThunk} Redux thunk, dispatch to run action."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txID",
        "description": "The ID of the transaction to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxThunk"
      ],
      "spread": false,
      "description": "Redux thunk, dispatch to run action."
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/tracking/transactions/openTxChannel.js",
    "content": "import { END, eventChannel } from 'redux-saga';\nimport * as transactionsAT from './AT';\n\n/**\n * Open a TX channel: this channel maps web3 events to our redux tracking system.\n *\n * @param promiEvent The event emitter to read transaction status updates from.\n * @param txID The ID of the transaction, used in the tracking system.\n * @returns {Channel<any>} The redux saga channel.\n */\nconst openTxChannel = (promiEvent, txID) => eventChannel((emit) => {\n  // Web3 returns a \"promise combined with an event emitter\": we map this to redux events.\n  promiEvent\n    .on('transactionHash', (hash) => {\n      emit({type: transactionsAT.TX_BROADCAST, txID, txHash: hash});\n    })\n    .on('receipt', (receipt) => {\n      // TODO: first receipt is probably double, as it's also the initial confirmation.\n      // This can be ignored for now, but maybe we can remove this listener altogether.\n      emit({type: transactionsAT.TX_RECEIPT, txID, receipt});\n    })\n    .on('confirmation', (confirmationNumber, receipt) => {\n      // re-fire the TX_RECEIPT\n      emit({type: transactionsAT.TX_RECEIPT, txID, receipt});\n      // We can safely close the channel once we received enough confirmations\n      if (confirmationNumber >= 12) {\n        emit(END);\n      }\n    })\n    .on('error', (error, receipt) => {\n      emit({type: transactionsAT.TX_FAILED, txID, receipt});\n      // TODO This is tricky, an out-of-gas transaction technically did not fail until it's final,\n      // as it could still be orphaned, and mined with a context\n      // that does not make it run out of gas.\n      emit(END);\n    });\n  // Return unsubscribe function (wrap for future compatibility)\n  return () => promiEvent.off();\n});\n\nexport default openTxChannel;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/transactions/openTxChannel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "function",
    "name": "openTxChannel",
    "memberof": "src/tracking/transactions/openTxChannel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/openTxChannel.js~openTxChannel",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/openTxChannel.js",
    "importStyle": "openTxChannel",
    "description": "Open a TX channel: this channel maps web3 events to our redux tracking system.",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Channel<any>} The redux saga channel."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "promiEvent",
        "description": "The event emitter to read transaction status updates from."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txID",
        "description": "The ID of the transaction, used in the tracking system."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Channel<any>"
      ],
      "spread": false,
      "description": "The redux saga channel."
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/tracking/transactions/transactionsRed.js",
    "content": "import * as transactionsAT from './AT';\nimport mappedReducer from '../../util/mapped-reducer';\n\nconst initialState = {\n  // empty initially\n};\n\n// TX flow:\n//\n//     *creation*         = User calls tx method\n//  -> [send]             = TX_SEND is started\n//  -> [sent]             = tx is added into tracker store, TX_SENT.\n//                           Web3provider needs to broadcast now\n//                           (e.g. user signs+sends with Metamask)\n//  -> [broadcast]        = Web3provider answered, we have a hash now, TX is in pool. TX_BROADCAST.\n//  -> [pending]          = Waiting for tx to get mined\n//  -> *confirmation*     = TX is mined, now we have to wait for the web3 provider to tell us.\n//  -> [receipt]          = Web3provider tells us the tx was processed.\n//                           Receipt is handled with TX_RECEIPT.\n//                           The receipt is being processed now.\n//  -> [failed/success]   = ReDApp fires an TX_SUCCESS/TX_FAILED depending on the receipt.\n//                           Note: TX_FAILED can also be fired without receipt,\n//                           meaning that the TX failed before being processed.\n//                           It fails with receipt when it ran out of gas.\n//  -> *more blocks mined on top*\n//  -> [confirmation, for each block] = Receipt may change, web3 tells us about the next 12 blocks.\n//                           But what we're really interested in is if the receipt changes,\n//                           in which case there should be another confirmation\n//                           from web3 with number 0. In this case, the TX_RECEIPT is fired again.\n//\n// *something* = implicit state, no events\n// [something] = explicit, fires an event\n//\n// Note that pending is an implicit state,\n//  and that the first confirmation won't be noticed before getting the first receipt,\n//  hence it not being a Redux event.\n\n// simple util function that replicates previous state and replace the specific transaction state.\nconst updateTx = (state, txID, txState) => ({\n  ...state,\n  [txID]: txState\n});\n\nconst mapping = {\n  [transactionsAT.TX_SENT]: (state, { txID, data }) => updateTx(state, txID,\n    {...state[txID], status: 'sent', receipt: { input: data } }),\n\n  [transactionsAT.SEND_TX_FAILED]: (state, { txID, err }) => updateTx(state, txID,\n    {...state[txID], status: 'send_failed', err }),\n\n  [transactionsAT.TX_BROADCAST]: (state, { txID, txHash }) => updateTx(state, txID,\n    {...state[txID], status: 'broadcast', hash: txHash }),\n\n  [transactionsAT.TX_FAILED]: (state, { txID, receipt }) => updateTx(state, txID,\n    {...state[txID], status: 'failed', receipt: { input: (state[txID].receipt || {}).input, ...(receipt || {}) }}),\n\n  [transactionsAT.TX_RECEIPT]: (state, { txID, receipt }) => updateTx(state, txID,\n    {...state[txID], receipt: { input: (state[txID].receipt || {}).input, ...(receipt || {}) }, status: receipt.blockNumber === null ? 'pending' : 'success'}),\n\n  [transactionsAT.FORGET_TX]: (state, { txID }) => {\n    const res = {...state};\n    delete res[txID];\n    return res;\n  }\n};\n\n/**\n * Transactions reducer of redapp.\n * @type {ReduxReducer}\n */\nexport default mappedReducer(mapping, initialState);\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/transactions/transactionsRed.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "initialState",
    "memberof": "src/tracking/transactions/transactionsRed.js",
    "static": true,
    "longname": "src/tracking/transactions/transactionsRed.js~initialState",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/transactions/transactionsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "updateTx",
    "memberof": "src/tracking/transactions/transactionsRed.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/transactionsRed.js~updateTx",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/transactions/transactionsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "txID",
        "types": [
          "*"
        ]
      },
      {
        "name": "txState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "mapping",
    "memberof": "src/tracking/transactions/transactionsRed.js",
    "static": true,
    "longname": "src/tracking/transactions/transactionsRed.js~mapping",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/transactions/transactionsRed.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{\"undefined\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/tracking/transactions/transactionsSaga.js",
    "content": "import {\n  put, takeEvery, call, take\n} from 'redux-saga/effects';\nimport uuid4 from 'uuid/v4';\nimport * as transactionsAT from './AT';\nimport openTxChannel from './openTxChannel';\n\n/**\n *\n * Web3 returns a \"promise combined with an event emitter\": we map this to redux events.\n *\n * @param web3 The web3 instance to use when sending the actual TX.\n * @param txID The ID of the transaction, used in the tracking system.\n * @param txParams The transaction parameters.\n * @param txParams.from Senders address, optional. (default wallet otherwise)\n * @param txParams.to Destination address, or undefined for contract creation.\n * @param txParams.value TX value in wei.\n * @param txParams.gas TX gas. Optional, can be determined later.\n * @param txParams.gasPrice TX gas price. Optional, defaults to web3.eth.gasPrice.\n * @param txParams.data Optional. TX data, i.e. abi encoded contract call,\n *              or contract code itself for contract creation.\n * @param txParams.nonce Optional, can be used to re-send a transaction (with higher gas).\n * @returns {PromiEvent<TransactionReceipt>} The redux saga channel.\n */\nconst createTransactionPromiEvent = (web3, txID, {\n  from, to, value, gas, gasPrice, data, nonce\n}) => web3.eth.sendTransaction({\n  from, to, value, gas, gasPrice, data, nonce\n});\n\n\nfunction* sendTX(web3, {from, to, value, gas, gasPrice, data, nonce, txID}) {\n  // If the user does not specify any ID, than create a new one (recommended).\n  const id = txID || uuid4();\n\n  let promiEvent;\n  try {\n    promiEvent = createTransactionPromiEvent(web3, id,\n      {from, to, value, gas, gasPrice, data, nonce});\n  } catch (err) {\n    yield put({type: transactionsAT.SEND_TX_FAILED, txID: id, err: err.message});\n    return;\n  }\n\n  // Open a TX channel: this channel maps web3 events to our redux tracking system.\n  const chan = yield call(openTxChannel, promiEvent, id);\n\n  yield put({type: transactionsAT.TX_SENT, txID: id, data});\n\n  try {\n    // Now process the channel, and forward the events.\n    // A channel END will make it reach the finally.\n    while (true) {\n      const event = yield take(chan);\n      yield put(event);\n    }\n  } finally {\n    chan.close();\n  }\n}\n\n/**\n * Handles ReDApp transaction background processing.\n * @param web3 The web3js 1.0 instance to use.\n * @param {ReduxStateSelector} getTransactionsState Gets transactions state.\n * @return {ReduxSaga} Transactions saga.\n */\n// getTransactionsState is unused, but there for future compability, if necessary.\n// Also more consistent with other saga signatures.\n// eslint-disable-next-line no-unused-vars\nfunction* transactionsSaga(web3, getTransactionsState) {\n  yield takeEvery(transactionsAT.SEND_TX, sendTX, web3);\n}\n\nexport default transactionsSaga;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/tracking/transactions/transactionsSaga.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "createTransactionPromiEvent",
    "memberof": "src/tracking/transactions/transactionsSaga.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/transactionsSaga.js~createTransactionPromiEvent",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/transactions/transactionsSaga.js",
    "importStyle": null,
    "description": "\nWeb3 returns a \"promise combined with an event emitter\": we map this to redux events.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PromiEvent<TransactionReceipt>} The redux saga channel."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3 instance to use when sending the actual TX."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txID",
        "description": "The ID of the transaction, used in the tracking system."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams",
        "description": "The transaction parameters."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.from",
        "description": "Senders address, optional. (default wallet otherwise)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.to",
        "description": "Destination address, or undefined for contract creation."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.value",
        "description": "TX value in wei."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.gas",
        "description": "TX gas. Optional, can be determined later."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.gasPrice",
        "description": "TX gas price. Optional, defaults to web3.eth.gasPrice."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.data",
        "description": "Optional. TX data, i.e. abi encoded contract call,\n             or contract code itself for contract creation."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "txParams.nonce",
        "description": "Optional, can be used to re-send a transaction (with higher gas)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PromiEvent<TransactionReceipt>"
      ],
      "spread": false,
      "description": "The redux saga channel."
    }
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "sendTX",
    "memberof": "src/tracking/transactions/transactionsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/transactionsSaga.js~sendTX",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/tracking/transactions/transactionsSaga.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "web3",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"from\": *, \"to\": *, \"value\": *, \"gas\": *, \"gasPrice\": *, \"data\": *, \"nonce\": *, \"txID\": *}"
        ],
        "defaultRaw": {
          "from": null,
          "to": null,
          "value": null,
          "gas": null,
          "gasPrice": null,
          "data": null,
          "nonce": null,
          "txID": null
        },
        "defaultValue": "{\"from\":null,\"to\":null,\"value\":null,\"gas\":null,\"gasPrice\":null,\"data\":null,\"nonce\":null,\"txID\":null}"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "transactionsSaga",
    "memberof": "src/tracking/transactions/transactionsSaga.js",
    "generator": true,
    "async": false,
    "static": true,
    "longname": "src/tracking/transactions/transactionsSaga.js~transactionsSaga",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/tracking/transactions/transactionsSaga.js",
    "importStyle": "transactionsSaga",
    "description": "Handles ReDApp transaction background processing.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "web3",
        "description": "The web3js 1.0 instance to use."
      },
      {
        "nullable": null,
        "types": [
          "ReduxStateSelector"
        ],
        "spread": false,
        "optional": false,
        "name": "getTransactionsState",
        "description": "Gets transactions state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReduxSaga"
      ],
      "spread": false,
      "description": "Transactions saga."
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/util/mapped-reducer.js",
    "content": "/**\n * Creates a simple reducer, based on a mapping and an initial state.\n * Similar to redux-actions, but much less bloated.\n * @param mapping An object with a mapping function for each action type,\n *  actions without key in this mapping are ignored.\n * @param initialState The state to use when there is none available.\n * @return {Function} The reducer.\n */\nexport default (mapping, initialState) => ((state = initialState, action) => {\n  // If unknown, just return old state.\n  if (!mapping[action.type]) return state;\n\n  // Map old state to new state\n  return mapping[action.type](state, action);\n});\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/util/mapped-reducer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "mappedreducer",
    "memberof": "src/util/mapped-reducer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/mapped-reducer.js~mappedreducer",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/util/mapped-reducer.js",
    "importStyle": "mappedreducer",
    "description": "Creates a simple reducer, based on a mapping and an initial state.\nSimilar to redux-actions, but much less bloated.",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mapping",
        "description": "An object with a mapping function for each action type,\n actions without key in this mapping are ignored."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "initialState",
        "description": "The state to use when there is none available."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "The reducer."
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/util/poller.js",
    "content": "import { call, take, race } from 'redux-saga/effects';\n\nconst delay = ms => new Promise(res => setTimeout(res, ms));\n\n// Introducing \"redux-poller\", a nice side-product of ReDApp utils.\n// Should I create a new package for this?\n\n/**\n * Simple redux saga utility for polling.\n * Returns a watcher saga that listens for an action of type startAT, and then starts polling.\n * Polling is then stopped when the watcher notices an action of type stopAT.\n * Polling can be resumed with an action of type startAT again.\n *\n * @param startAT The action type to listen for to start polling.\n * This action should have a property 'interval', specifying the number of milliseconds\n *  to wait before executing the next poll iteration.\n * @param stopAT The action type to listen for to stop polling.\n * @param workerInner A saga that is called each poll iteration.\n * @param errorHandler A saga that is called on an error during a polling iteration.\n *  Optional, error is propagated otherwise.\n * @param workerArgs The remaining function arguments are forwarded to workerInner.\n * @returns {pollWatcher} The watcher saga, controlling the inner worker saga.\n */\nfunction poller(startAT, stopAT, workerInner, errorHandler, ...workerArgs) {\n  // ms: the polling interval in milliseconds\n  function* pollWorker(ms) {\n    // Repeat endlessly, watcher will take control away on a stop command.\n    while (true) {\n      try {\n        // Do the necessary work\n        yield call(workerInner, ...workerArgs);\n        // wait for next polling iteration\n        yield call(delay, ms);\n      } catch (err) {\n        // check for error handler\n        if (errorHandler) {\n          yield call(errorHandler, err);\n        } else {\n          // propagate error if error is not handled\n          throw err;\n        }\n      }\n    }\n  }\n\n  function* pollWatcher() {\n    // Repeat the start/stop cycle.\n    while (true) {\n      // Wait for a start command, which specifies the interval for polling.\n      const { interval } = yield take(startAT);\n      // Now run the worker until we get a stop.\n      yield race([\n        call(pollWorker, interval),\n        take(stopAT)\n      ]);\n    }\n  }\n\n  return pollWatcher;\n}\n\nexport default poller;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/util/poller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "delay",
    "memberof": "src/util/poller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/poller.js~delay",
    "access": "public",
    "export": false,
    "importPath": "redapp/es/util/poller.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "ms",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "poller",
    "memberof": "src/util/poller.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/poller.js~poller",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/util/poller.js",
    "importStyle": "poller",
    "description": "Simple redux saga utility for polling.\nReturns a watcher saga that listens for an action of type startAT, and then starts polling.\nPolling is then stopped when the watcher notices an action of type stopAT.\nPolling can be resumed with an action of type startAT again.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{pollWatcher} The watcher saga, controlling the inner worker saga."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "startAT",
        "description": "The action type to listen for to start polling.\nThis action should have a property 'interval', specifying the number of milliseconds\n to wait before executing the next poll iteration."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stopAT",
        "description": "The action type to listen for to stop polling."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "workerInner",
        "description": "A saga that is called each poll iteration."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "errorHandler",
        "description": "A saga that is called on an error during a polling iteration.\n Optional, error is propagated otherwise."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "workerArgs",
        "description": "The remaining function arguments are forwarded to workerInner."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "pollWatcher"
      ],
      "spread": false,
      "description": "The watcher saga, controlling the inner worker saga."
    }
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/util/subber.js",
    "content": "import { call, take, race } from 'redux-saga/effects';\nimport { eventChannel } from 'redux-saga';\n\n// Introducing \"redux-subber\", a nice side-product of ReDApp utils. Also see poller util.\n// Should I create a new package for this too?\n\n/**\n * Maps an event-emitter (like web3.js uses) to a redux-saga event-channel,\n *  with support for being started/stopped/resumed.\n * @param startAT The action type that starts/resumes it.\n * @param stopAT The action type that stops it.\n * @param dataAT The action type that will be emitted when a \"data\" event\n *  is received from the subscription. Payload property = 'data'\n * @param changedAT The action type that will be emitted when a \"changed\" event\n *  is received from the subscription. Payload property = 'changed'\n * @param errorAT The action type that will be emitted when a \"error\" event\n *  is received from the subscription. Payload property = 'err'\n * @param openEventSub A function that returns a new EventEmitter ready to subscribe to.\n * @returns {subscriptionWatcher} The watcher, a redux-saga,\n *  can be shut down to stop the service completely.\n *  Controls the inner event-channel (like the worker in the poller utility).\n */\nfunction subber(startAT, stopAT, dataAT, changedAT, errorAT, openEventSub) {\n  // eventSub: the EventEmitter handle\n  const createEventChannel = eventSub => eventChannel((emit) => {\n    // Map the events to redux actions\n    eventSub\n      .on('data', (data) => {\n        emit({type: dataAT, data});\n      })\n      .on('changed', (changed) => {\n        emit({type: changedAT, changed});\n      })\n      .on('error', (error) => {\n        emit({type: errorAT, err: error.message});\n      });\n    // Return unsubscribe function (wrap for future compatibility)\n    return () => eventSub.unsubscribe();\n  });\n\n  // Watches for starts, starting the subscription\n  // Watches for stops, pausing the subscription (New start will re-use same subscription settings)\n  function* subscriptionWatcher() {\n    let eventSub;\n    // Repeat the start/stop cycle.\n    while (true) {\n      // Wait for a start command, which specifies the interval for polling.\n      yield take(startAT);\n      if (eventSub) {\n        // re-subscribe (will be with old parameters)\n        eventSub.subscribe();\n      } else {\n        // open a new subscription\n        eventSub = openEventSub();\n      }\n      // Now run the event channel until we get a stop.\n      yield race([\n        call(createEventChannel, eventSub),\n        take(stopAT)\n      ]);\n    }\n  }\n\n  return subscriptionWatcher;\n}\n\nexport default subber;\n",
    "static": true,
    "longname": "/home/travis/build/protolambda/redapp/src/util/subber.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "subber",
    "memberof": "src/util/subber.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util/subber.js~subber",
    "access": "public",
    "export": true,
    "importPath": "redapp/es/util/subber.js",
    "importStyle": "subber",
    "description": "Maps an event-emitter (like web3.js uses) to a redux-saga event-channel,\n with support for being started/stopped/resumed.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{subscriptionWatcher} The watcher, a redux-saga,\n can be shut down to stop the service completely.\n Controls the inner event-channel (like the worker in the poller utility)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "startAT",
        "description": "The action type that starts/resumes it."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stopAT",
        "description": "The action type that stops it."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataAT",
        "description": "The action type that will be emitted when a \"data\" event\n is received from the subscription. Payload property = 'data'"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "changedAT",
        "description": "The action type that will be emitted when a \"changed\" event\n is received from the subscription. Payload property = 'changed'"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "errorAT",
        "description": "The action type that will be emitted when a \"error\" event\n is received from the subscription. Payload property = 'err'"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "openEventSub",
        "description": "A function that returns a new EventEmitter ready to subscribe to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "subscriptionWatcher"
      ],
      "spread": false,
      "description": "The watcher, a redux-saga,\n can be shut down to stop the service completely.\n Controls the inner event-channel (like the worker in the poller utility)."
    }
  },
  {
    "kind": "index",
    "content": "<img width=\"600\" src=\"docs/img/redapp_full.svg\"/>\n\n# ReDApp\n\n[![Build Status](https://travis-ci.org/protolambda/redapp.svg?branch=master)](https://travis-ci.org/protolambda/redapp)\n[![dependencies Status](https://david-dm.org/protolambda/redapp/status.svg)](https://david-dm.org/protolambda/redapp)\n[![devDependencies Status](https://david-dm.org/protolambda/redapp/dev-status.svg)](https://david-dm.org/protolambda/redapp?type=dev)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\nReDApp is a NPM package aiming to ease the development of DApps (decentralized applications)\n by performing the common web3 tasks in an idiomatic [Redux](https://github.com/reduxjs/redux) flow:\n\n  - call smartcontract getters, e.g. read token balance.\n  - transactions\n  - accounts\n  - blocks\n  - send regular transactions\n  - send smart-contract transactions\n\ncoming soon in V2:\n  - retrieve history: get filtered event logs\n\nReDApp only supports Web3.js v1.0+.\n\n## Documentation\n\nAPI reference docs and integration docs can be found here:\n[ReDApp Documentation](https://redapp.protolambda.com)\n\n\n## Dependencies\n\n### Library deps.\n\n- Web3.0, v1.0+\n- redux + redux-saga: where tracked information is maintained and updated with.\n- UUID/v4: for unique ids for each transaction. Hashes do not suffice since in-broadcast transactions don't have a hash yet.\n\n\n### Dev deps.\n\n- Babel (v7): ES6 support\n- Mocha, Chai: testing\n- istanbul: coverage reporting\n- rimraf, cross-env, npm-run-all: utils for npm run scripts\n- ESLint: linting\n- ESdoc: documentation generator, checks doc coverage.\n\n\n## Examples\n\nSee `/examples` folder:\n\n- [ReDApp React example](examples/react-example/README.md)\n- [Minimal example](examples/simple)\n\n## Testing & Coverage\n\n```bash\nnpm run:test\nnpm run:cover\n```\n\n## Building\n\nThere are three build output formats: ES6, common-js, UMD.\n\n### ES6\n\n- Babel stage features are transformed, code is otherwise the same\n- Separate modules\n- Outputs to `es`\n\n```bash\nnpm run build:es\n```\n\n### Common-js\n\n- Separate modules\n- Compatible with non-ES6 code\n- Outputs to `/lib`\n\n```bash\nnpm run build:cjs\n```\n\n### UMD\n\n- bundled code, single module require.\n- Built to work with unpkg.\n- external dependencies\n- external babel helpers (`regeneratorRuntime`)\n- Outputs to `/dist/redapp.js`, and a minified version, `/dist/redapp.js`\n\n```bash\nnpm run build:umd\nnpm run build:umd:min\n```\n\n## License\n\nMIT, see [LICENSE file](LICENSE)\n",
    "longname": "/home/travis/build/protolambda/redapp/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"redapp\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Redux web3 integration and util for DApps\",\n  \"scripts\": {\n    \"build\": \"npm run clean && run-p build:**\",\n    \"build:cjs\": \"cross-env BABEL_ENV=cjs babel src --out-dir lib\",\n    \"build:es\": \"cross-env BABEL_ENV=es babel src --out-dir es\",\n    \"build:umd\": \"cross-env BABEL_ENV=umd NODE_ENV=development rollup -c -o dist/redapp.js\",\n    \"build:umd:min\": \"cross-env BABEL_ENV=umd NODE_ENV=production rollup -c -o dist/redapp.min.js\",\n    \"clean\": \"rimraf lib dist es coverage docs-out\",\n    \"test\": \"npm run lint && npm run cover\",\n    \"test:prod\": \"cross-env BABEL_ENV=production npm run test\",\n    \"test:only\": \"mocha --compilers js:@babel/register\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"cover\": \"istanbul cover _mocha -- --compilers js:@babel/register --recursive\",\n    \"lint\": \"eslint src test\",\n    \"prepare\": \"npm run clean && npm run lint && npm run test && npm run build\",\n    \"docs\": \"./scripts/build-docs.sh\",\n    \"docs-examples\": \"./scripts/build-docs-examples.sh\",\n    \"view-docs\": \"http-server docs-out -p 8080 -a localhost\"\n  },\n  \"main\": \"lib/index.js\",\n  \"unpkg\": \"dist/index.min.js\",\n  \"module\": \"es/index.js\",\n  \"jsnext:main\": \"es/index.js\",\n  \"files\": [\n    \"dist\",\n    \"lib\",\n    \"es\",\n    \"src\",\n    \"LICENSE\",\n    \"CHANGELOG.md\",\n    \"README.md\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/protolambda/redapp.git\"\n  },\n  \"keywords\": [\n    \"ethereum\",\n    \"redux\",\n    \"dapp\",\n    \"tracking\",\n    \"transaction\",\n    \"transactions\",\n    \"smartcontract\",\n    \"smartcontracts\"\n  ],\n  \"author\": \"@protolambda <proto@protolambda.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/protolambda/redapp/issues\"\n  },\n  \"homepage\": \"https://github.com/protolambda/redapp#readme\",\n  \"devDependencies\": {\n    \"@babel/cli\": \"7.0.0\",\n    \"@babel/core\": \"7.0.0\",\n    \"@babel/register\": \"7.0.0\",\n    \"@babel/plugin-external-helpers\": \"7.0.0\",\n    \"@babel/plugin-transform-runtime\": \"7.0.0\",\n    \"@babel/preset-env\": \"7.0.0\",\n    \"@babel/preset-stage-2\": \"7.0.0\",\n    \"@babel/runtime\": \"7.0.0\",\n    \"@babel/plugin-proposal-decorators\": \"7.0.0\",\n    \"@babel/plugin-proposal-function-sent\": \"7.0.0\",\n    \"@babel/plugin-proposal-export-namespace-from\": \"7.0.0\",\n    \"@babel/plugin-proposal-numeric-separator\": \"7.0.0\",\n    \"@babel/plugin-proposal-throw-expressions\": \"7.0.0\",\n    \"@babel/plugin-syntax-dynamic-import\": \"7.0.0\",\n    \"@babel/plugin-syntax-import-meta\": \"7.0.0\",\n    \"@babel/plugin-proposal-class-properties\": \"7.0.0\",\n    \"@babel/plugin-proposal-json-strings\": \"7.0.0\",\n    \"babel-eslint\": \"^8.2.4\",\n    \"chai\": \"^4.1.2\",\n    \"cross-env\": \"^5.2.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-brand-plugin\": \"git://github.com/protolambda/esdoc-plugins.git#esdoc-brand-plugin-v1.1.1-gitpkg\",\n    \"esdoc-integrate-manual-plugin\": \"git://github.com/protolambda/esdoc-plugins.git#esdoc-integrate-manual-plugin-v2.0.0-gitpkg\",\n    \"esdoc-publish-html-plugin\": \"git://github.com/protolambda/esdoc-plugins.git#esdoc-publish-html-plugin-v1.2.0-gitpkg\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.3.0\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"http-server\": \"^0.11.1\",\n    \"istanbul\": \"^1.0.0-alpha\",\n    \"loose-envify\": \"^1.1.0\",\n    \"mocha\": \"^5.2.0\",\n    \"npm-run-all\": \"^4.1.3\",\n    \"rimraf\": \"^2.6.2\",\n    \"rollup\": \"^0.63.4\",\n    \"rollup-plugin-babel\": \"^4.0.0-beta.7\",\n    \"rollup-plugin-commonjs\": \"^9.1.3\",\n    \"rollup-plugin-node-resolve\": \"^3.3.0\",\n    \"rollup-plugin-replace\": \"^2.0.0\",\n    \"rollup-plugin-uglify\": \"^4.0.0\",\n    \"symbol-observable\": \"^1.2.0\"\n  },\n  \"dependencies\": {\n    \"redux\": \"^4.0.0\",\n    \"redux-saga\": \"^0.16.0\",\n    \"uuid\": \"^3.3.2\",\n    \"web3\": \"^1.0.0-beta.34\",\n    \"web3-utils\": \"^1.0.0-beta.34\"\n  },\n  \"npmName\": \"redux\",\n  \"npmFileMap\": [\n    {\n      \"basePath\": \"/dist/\",\n      \"files\": [\n        \"*.js\"\n      ]\n    }\n  ],\n  \"browserify\": {\n    \"transform\": [\n      \"loose-envify\"\n    ]\n  }\n}\n",
    "longname": "/home/travis/build/protolambda/redapp/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "content": "# ReDApp Documentation\n\nThis documentation aims to outline usage and integration of ReDApp.\n\nFiner details can be found in the [API reference](api)\n\n\n## Overview\n\n### General\n\n- [The Web3 instance](web3.md)\n- [Contracts](contracts.md)\n\n### Tracking\n\n- [Transactions](tracking/transactions.md)\n- [Calls](tracking/calls.md)\n- [Accounts](tracking/accounts.md)\n- [Blocks](tracking/blocks.md)\n\n\n------\n\nIdeas for new documentation? Create a GitHub issue or PR!\nIf necessary, you can reach the creator of ReDApp on twitter: @protolambda\n\n",
    "longname": "/home/travis/build/protolambda/redapp/docs/README.md",
    "name": "./docs/README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/README.md",
    "name": "README.md",
    "content": "# ReDApp Documentation\n\nThis documentation aims to outline usage and integration of ReDApp.\n\nFiner details can be found in the [API reference](api)\n\n\n## Overview\n\n### General\n\n- [The Web3 instance](web3.md)\n- [Contracts](contracts.md)\n\n### Tracking\n\n- [Transactions](tracking/transactions.md)\n- [Calls](tracking/calls.md)\n- [Accounts](tracking/accounts.md)\n- [Blocks](tracking/blocks.md)\n\n\n------\n\nIdeas for new documentation? Create a GitHub issue or PR!\nIf necessary, you can reach the creator of ReDApp on twitter: @protolambda\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/contracts.md",
    "name": "contracts.md",
    "content": "# ReDApp Contracts\n\nContracts can be loaded with the `addContract()` action (type `ADD_CONTRACT`).\nAnd if you ever need to remove a contract, just use `forgetContract()` (type `FORGET_CONTRACT`).\nOnce the contract is loaded (type `CONTRACT_ADDED`),\n it exposes its methods (from ABI spec) in the state.\n \n```js\nredapp.contracts.MyContract.methods.mySoldityFunction.someRedappAction(...args)\n```\n\nThere are 2 types of methods: non-constant and constant.\n\n\n## Non-Constant methods\n\nThese look like:\n\n```js\nconst {txID, thunk} = mySoldityFunction.trackedSend({\n  from: '0x1234567890......',\n  // optionally other transaction settings, see API ref.\n}, ...myArguments)\n```\n\nNon-constant methods change state, by creating a transaction.\nThis transaction will be tracked, and the web3-provider will need to sign it.\n\n`trackedSend` only creates the initiating redux action, it does not run it.\nInstead, it returns the randomly generated ID (`txID`) with\n which the transaction will be tracked, together with a `thunk`.\n\nNote: the `txID` is not the same as the transaction hash; \n redapp needs to track the transaction before knowing the hash, hence it cannot use the hash.\n\nThis thunk can then be dispatched whenever you like, \n and will start a new transaction, tracked with `txID`.\n\n```js\nstore.dispatch(thunk)\n```\n\nUnder the hood this creates a normal transaction, but with the txID from earlier.\nThe transaction data is created on the fly using the arguments from the `trackedSend`\n (ABI encoded using the ABI you used when creating the contract).\n\nSee [transactions tracking](tracking/transactions.md) on how to track transactions\n after dispatching the thunk; contract transactions are no different than raw transactions.\n\n\n## Constant methods\n\nConstant methods are very similar:\n\n```js\nconst {callID, thunk} = mySoldityViewFunction.cacheCall({\n  // call options, like the sender or block number, see API ref.\n}, ...myArguments)\n\n// And similarly:\nconst {callID, thunk} = mySoldityViewFunction.forceCall({\n  // call options, like the sender or block number, see API ref.\n}, ...myArguments)\n```\n\nCalls can be forced, or can try to hit the \"cache\" (i.e. tries to look in the calls state) first.\nTo hit the cache, callIDs are not random, but based on the settings of the call; \n the sender, contract address, arguments, and blockNr form a unique ID together.\n\nLike transactions, calls also produce an ID and a thunk.\n\nSee [calls tracking](tracking/calls.md) on how to track calls\n after dispatching the thunk; contract calls are no different than raw calls.\n\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/examples.md",
    "name": "examples.md",
    "content": "# Example projects\n\nReDApp provides a few example projects, for demo purposes and as a full implementation reference.\nTry them!\n\n## React Example\n\nThe React/Redux mix is very common, hence an example to use ReDapp with React.\n\nA live demo can be found here: https://redapp.protolambda.com/examples/react-example/\n\n- Load contract interfaces and interact with them (powered by redapp in the background).\n- Track accounts, from both state collections: \n`local` (i.e. added by you using the gui), and `wallet` (e.g. your active metmask account)\n- Track blocks\n- Track log-events (coming soon in redapp V2)\n\nSource code: https://github.com/protolambda/redapp/tree/master/examples/react-example\n\n\n## Minimal example\n\nThis is the example you want to check out if you just want to use redapp on\n a very minimal NodeJS project, which can be easily adopted to your own redux setup.\n\nThe minimal example can be run from CLI.\n\nhttps://github.com/protolambda/redapp/tree/master/examples/minimal\n\n\n## Feature requests / Bug reports\n\nSuggestions and improvements are always welcome,\njust create an issue or PR on [GitHub](https://github.com/protolambda/redapp)!\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/store_structure.md",
    "name": "store_structure.md",
    "content": "# Redux Store Structure\n\n- `[root]`\n  - `tracking`: keep tracking separated, it's non-actionable, just watch something or don't.\n    - `accounts`: keep accounts together with their state, like balance.\n      - `local`: Accounts that are locally tracked, i.e. by the application.\n      - `wallet`: Accounts that are tracked, but belong to the wallet of the user.\n    - `blocks`: a mapping, with block hash as key. Only the last X (configurable) blocks are\n      kept in memory, older ones are removed.\n    - `transactions`: a mapping, with a UUID (v4) as key. Because TX-hashes are not available\n      before processing by the web3provider.\n    - `calls`: a mapping, with a hash (see docs) as key (Fallback to UUID).\n      Acts as a cache; it can be cleared, and cache-calls can be made\n      (i.e. try to hit cache before resorting to make a new web3 call). \n  - `contracts`: actionable, more complex, not necessarily tracked, hence separated\n    from the tracking. Contract methods delegate web3 work to the tracking system,\n     only ABI-encoding is done by the contract.\n\nTODO: document store structure with properties and example objects in state.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/web3.md",
    "name": "web3.md",
    "content": "# Web3 object\n\nThe web3 object (Web3.js 1.0) is accessed in many different ways across the DApp ecosystem.\nTo keep ReDApp clean, we chose not force our own instantiation code upon the user.\nInstead, the ReDApp sagas all access web3 from an argument passed to the saga.\nAs consumer of the ReDApp library, you can pass your own web3\n (connected to http/ws/whatever you like) to the rootSaga,\n  or any sub-saga, if you decide to use it differently.\n\n\n## Loading/Switching the web3 instance.\n\nIf you do not want to create the web3 instance when starting the redapp saga,\n you can hook the redapp root-saga as a generator to your own saga.\nThis enables you to provide a web3 instance dynamically, based on your state outside of ReDApp.\nSimply stop the rootSaga and re-run if you want to pass a different web3 instance.\n\n\n## Networks\n\nReDApp V1 does not support multiple networks at the same time yet; blocks are tracked globally,\n and call IDs do not include the network ID.\nIn a multi-network setting one should run multiple redapp instances,\n connected to separate redux stores.\nFeedback on design to support multiple networks is appreciated, and will be considered for V2.\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/travis/build/protolambda/redapp/docs/img/redapp.svg",
    "name": "img/redapp.svg",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/home/travis/build/protolambda/redapp/docs/img/redapp_full.svg",
    "name": "img/redapp_full.svg",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/tracking/accounts.md",
    "name": "tracking/accounts.md",
    "content": "# Tracking Accounts\n\nTODO\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/tracking/blocks.md",
    "name": "tracking/blocks.md",
    "content": "# Tracking Blocks\n\nTODO\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/tracking/calls.md",
    "name": "tracking/calls.md",
    "content": "# Tracking Calls\n\nTODO\n\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/home/travis/build/protolambda/redapp/tracking/transactions.md",
    "name": "tracking/transactions.md",
    "content": "# Tracking Transactions\n\nTODO\n\n",
    "static": true,
    "access": "public"
  }
]